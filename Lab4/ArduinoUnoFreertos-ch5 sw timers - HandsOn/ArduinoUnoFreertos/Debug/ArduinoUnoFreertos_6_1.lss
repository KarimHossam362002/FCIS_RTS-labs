
ArduinoUnoFreertos_6_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800100  00001ce0  00001d74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ce0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000068f  00800170  00800170  00001de4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001de4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000400  00000000  00000000  00001e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000543c  00000000  00000000  00002254  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000156b  00000000  00000000  00007690  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c20  00000000  00000000  00008bfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ca0  00000000  00000000  0000b81c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a3f  00000000  00000000  0000c4bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004c0e  00000000  00000000  0000defb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000448  00000000  00000000  00012b09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <__vector_1>
       8:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__vector_2>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__vector_11>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 86 02 	jmp	0x50c	; 0x50c <__vector_16>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	86 0d       	add	r24, r6
      6a:	86 0d       	add	r24, r6
      6c:	86 0d       	add	r24, r6
      6e:	c1 0d       	add	r28, r1
      70:	af 0d       	add	r26, r15
      72:	be 0d       	add	r27, r14
      74:	86 0d       	add	r24, r6
      76:	86 0d       	add	r24, r6
      78:	c1 0d       	add	r28, r1
      7a:	af 0d       	add	r26, r15

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e0 ee       	ldi	r30, 0xE0	; 224
      90:	fc e1       	ldi	r31, 0x1C	; 28
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a0 37       	cpi	r26, 0x70	; 112
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	27 e0       	ldi	r18, 0x07	; 7
      a0:	a0 e7       	ldi	r26, 0x70	; 112
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	af 3f       	cpi	r26, 0xFF	; 255
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 b6 00 	call	0x16c	; 0x16c <main>
      b2:	0c 94 6e 0e 	jmp	0x1cdc	; 0x1cdc <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <MyTimer>:
#define F_CPU 16000000UL
TimerHandle_t Timer_Function1;
void MyTimer( TimerHandle_t Timer_Function1 )
{
	/*toggle the led on portD pin 5*/
	PORTD ^= (1<<5);
      ba:	9b b1       	in	r25, 0x0b	; 11
      bc:	80 e2       	ldi	r24, 0x20	; 32
      be:	89 27       	eor	r24, r25
      c0:	8b b9       	out	0x0b, r24	; 11
      c2:	08 95       	ret

000000c4 <Task1>:
		1. receive a char from the user,then display it on terminal window. 
		
		2. implement the mentioned conditions.
		
		*/
		USART_sendstr("Type character d , i , s , r \r\n");
      c4:	84 e0       	ldi	r24, 0x04	; 4
      c6:	91 e0       	ldi	r25, 0x01	; 1
      c8:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <USART_sendstr>
		char c = USART_receive();
      cc:	0e 94 57 0e 	call	0x1cae	; 0x1cae <USART_receive>
      d0:	c8 2f       	mov	r28, r24
		USART_sendstr("you Typed : \n");
      d2:	84 e2       	ldi	r24, 0x24	; 36
      d4:	91 e0       	ldi	r25, 0x01	; 1
      d6:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <USART_sendstr>
		USART_send(c);
      da:	8c 2f       	mov	r24, r28
      dc:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <USART_send>
		
		if (c == 'd'){
      e0:	c4 36       	cpi	r28, 0x64	; 100
      e2:	71 f4       	brne	.+28     	; 0x100 <Task1+0x3c>
			xTimerChangePeriod(Timer_Function1,period*2,100);
      e4:	04 e6       	ldi	r16, 0x64	; 100
      e6:	10 e0       	ldi	r17, 0x00	; 0
      e8:	20 e0       	ldi	r18, 0x00	; 0
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	48 ec       	ldi	r20, 0xC8	; 200
      ee:	50 e0       	ldi	r21, 0x00	; 0
      f0:	64 e0       	ldi	r22, 0x04	; 4
      f2:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <Timer_Function1>
      f6:	90 91 d6 07 	lds	r25, 0x07D6	; 0x8007d6 <Timer_Function1+0x1>
      fa:	0e 94 3d 0c 	call	0x187a	; 0x187a <xTimerGenericCommand>
      fe:	e2 cf       	rjmp	.-60     	; 0xc4 <Task1>
		}
		else if (c == 'i'){
     100:	c9 36       	cpi	r28, 0x69	; 105
     102:	71 f4       	brne	.+28     	; 0x120 <Task1+0x5c>
			xTimerChangePeriod(Timer_Function1,period/2,100);
     104:	04 e6       	ldi	r16, 0x64	; 100
     106:	10 e0       	ldi	r17, 0x00	; 0
     108:	20 e0       	ldi	r18, 0x00	; 0
     10a:	30 e0       	ldi	r19, 0x00	; 0
     10c:	42 e3       	ldi	r20, 0x32	; 50
     10e:	50 e0       	ldi	r21, 0x00	; 0
     110:	64 e0       	ldi	r22, 0x04	; 4
     112:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <Timer_Function1>
     116:	90 91 d6 07 	lds	r25, 0x07D6	; 0x8007d6 <Timer_Function1+0x1>
     11a:	0e 94 3d 0c 	call	0x187a	; 0x187a <xTimerGenericCommand>
     11e:	d2 cf       	rjmp	.-92     	; 0xc4 <Task1>
		}
		else if (c == 'r')
     120:	c2 37       	cpi	r28, 0x72	; 114
     122:	79 f4       	brne	.+30     	; 0x142 <Task1+0x7e>
		{
			xTimerReset(Timer_Function1,100);
     124:	0e 94 a3 08 	call	0x1146	; 0x1146 <xTaskGetTickCount>
     128:	04 e6       	ldi	r16, 0x64	; 100
     12a:	10 e0       	ldi	r17, 0x00	; 0
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	ac 01       	movw	r20, r24
     132:	62 e0       	ldi	r22, 0x02	; 2
     134:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <Timer_Function1>
     138:	90 91 d6 07 	lds	r25, 0x07D6	; 0x8007d6 <Timer_Function1+0x1>
     13c:	0e 94 3d 0c 	call	0x187a	; 0x187a <xTimerGenericCommand>
     140:	c1 cf       	rjmp	.-126    	; 0xc4 <Task1>
		}
		else if (c == 's')
     142:	c3 37       	cpi	r28, 0x73	; 115
     144:	71 f4       	brne	.+28     	; 0x162 <Task1+0x9e>
		{
			xTimerStop(Timer_Function1,100);
     146:	04 e6       	ldi	r16, 0x64	; 100
     148:	10 e0       	ldi	r17, 0x00	; 0
     14a:	20 e0       	ldi	r18, 0x00	; 0
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	40 e0       	ldi	r20, 0x00	; 0
     150:	50 e0       	ldi	r21, 0x00	; 0
     152:	63 e0       	ldi	r22, 0x03	; 3
     154:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <Timer_Function1>
     158:	90 91 d6 07 	lds	r25, 0x07D6	; 0x8007d6 <Timer_Function1+0x1>
     15c:	0e 94 3d 0c 	call	0x187a	; 0x187a <xTimerGenericCommand>
     160:	b1 cf       	rjmp	.-158    	; 0xc4 <Task1>
		}
		else{
			USART_sendstr("Wrong Character , Exiting... \n");
     162:	82 e3       	ldi	r24, 0x32	; 50
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <USART_sendstr>
     16a:	ac cf       	rjmp	.-168    	; 0xc4 <Task1>

0000016c <main>:
		}

	}
}
int main(void) {
     16c:	af 92       	push	r10
     16e:	bf 92       	push	r11
     170:	cf 92       	push	r12
     172:	df 92       	push	r13
     174:	ef 92       	push	r14
     176:	ff 92       	push	r15
     178:	0f 93       	push	r16
     17a:	1f 93       	push	r17
	USART_init();
     17c:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <USART_init>
	DDRD = 0xFF;
     180:	8f ef       	ldi	r24, 0xFF	; 255
     182:	8a b9       	out	0x0a, r24	; 10
	3. create a task which controls the frequency of the timer.
	
	4. start the scheduler.
	
	*/
	Timer_Function1 = xTimerCreate("Timer1",100,pdTRUE,NULL,MyTimer);
     184:	0d e5       	ldi	r16, 0x5D	; 93
     186:	10 e0       	ldi	r17, 0x00	; 0
     188:	20 e0       	ldi	r18, 0x00	; 0
     18a:	30 e0       	ldi	r19, 0x00	; 0
     18c:	41 e0       	ldi	r20, 0x01	; 1
     18e:	64 e6       	ldi	r22, 0x64	; 100
     190:	70 e0       	ldi	r23, 0x00	; 0
     192:	81 e5       	ldi	r24, 0x51	; 81
     194:	91 e0       	ldi	r25, 0x01	; 1
     196:	0e 94 05 0c 	call	0x180a	; 0x180a <xTimerCreate>
     19a:	90 93 d6 07 	sts	0x07D6, r25	; 0x8007d6 <Timer_Function1+0x1>
     19e:	80 93 d5 07 	sts	0x07D5, r24	; 0x8007d5 <Timer_Function1>
	xTimerStart(Timer_Function1,100);
     1a2:	0e 94 a3 08 	call	0x1146	; 0x1146 <xTaskGetTickCount>
     1a6:	04 e6       	ldi	r16, 0x64	; 100
     1a8:	10 e0       	ldi	r17, 0x00	; 0
     1aa:	20 e0       	ldi	r18, 0x00	; 0
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	ac 01       	movw	r20, r24
     1b0:	61 e0       	ldi	r22, 0x01	; 1
     1b2:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <Timer_Function1>
     1b6:	90 91 d6 07 	lds	r25, 0x07D6	; 0x8007d6 <Timer_Function1+0x1>
     1ba:	0e 94 3d 0c 	call	0x187a	; 0x187a <xTimerGenericCommand>
	
	xTaskCreate(Task1,"Task1",256,NULL,1,NULL);
     1be:	a1 2c       	mov	r10, r1
     1c0:	b1 2c       	mov	r11, r1
     1c2:	c1 2c       	mov	r12, r1
     1c4:	d1 2c       	mov	r13, r1
     1c6:	e1 2c       	mov	r14, r1
     1c8:	f1 2c       	mov	r15, r1
     1ca:	01 e0       	ldi	r16, 0x01	; 1
     1cc:	20 e0       	ldi	r18, 0x00	; 0
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	40 e0       	ldi	r20, 0x00	; 0
     1d2:	51 e0       	ldi	r21, 0x01	; 1
     1d4:	68 e5       	ldi	r22, 0x58	; 88
     1d6:	71 e0       	ldi	r23, 0x01	; 1
     1d8:	82 e6       	ldi	r24, 0x62	; 98
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	0e 94 5d 07 	call	0xeba	; 0xeba <xTaskGenericCreate>
	
	vTaskStartScheduler();
     1e0:	0e 94 6e 08 	call	0x10dc	; 0x10dc <vTaskStartScheduler>
	
	return 0;
}
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	1f 91       	pop	r17
     1ea:	0f 91       	pop	r16
     1ec:	ff 90       	pop	r15
     1ee:	ef 90       	pop	r14
     1f0:	df 90       	pop	r13
     1f2:	cf 90       	pop	r12
     1f4:	bf 90       	pop	r11
     1f6:	af 90       	pop	r10
     1f8:	08 95       	ret

000001fa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     1fa:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     1fc:	03 96       	adiw	r24, 0x03	; 3
     1fe:	92 83       	std	Z+2, r25	; 0x02
     200:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     202:	2f ef       	ldi	r18, 0xFF	; 255
     204:	3f ef       	ldi	r19, 0xFF	; 255
     206:	34 83       	std	Z+4, r19	; 0x04
     208:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     20a:	96 83       	std	Z+6, r25	; 0x06
     20c:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     20e:	90 87       	std	Z+8, r25	; 0x08
     210:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     212:	10 82       	st	Z, r1
     214:	08 95       	ret

00000216 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     216:	fc 01       	movw	r30, r24
     218:	11 86       	std	Z+9, r1	; 0x09
     21a:	10 86       	std	Z+8, r1	; 0x08
     21c:	08 95       	ret

0000021e <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	9c 01       	movw	r18, r24
     224:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     226:	dc 01       	movw	r26, r24
     228:	11 96       	adiw	r26, 0x01	; 1
     22a:	cd 91       	ld	r28, X+
     22c:	dc 91       	ld	r29, X
     22e:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     230:	d3 83       	std	Z+3, r29	; 0x03
     232:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     234:	8c 81       	ldd	r24, Y+4	; 0x04
     236:	9d 81       	ldd	r25, Y+5	; 0x05
     238:	95 83       	std	Z+5, r25	; 0x05
     23a:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     23c:	8c 81       	ldd	r24, Y+4	; 0x04
     23e:	9d 81       	ldd	r25, Y+5	; 0x05
     240:	dc 01       	movw	r26, r24
     242:	13 96       	adiw	r26, 0x03	; 3
     244:	7c 93       	st	X, r23
     246:	6e 93       	st	-X, r22
     248:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     24a:	7d 83       	std	Y+5, r23	; 0x05
     24c:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     24e:	31 87       	std	Z+9, r19	; 0x09
     250:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     252:	f9 01       	movw	r30, r18
     254:	80 81       	ld	r24, Z
     256:	8f 5f       	subi	r24, 0xFF	; 255
     258:	80 83       	st	Z, r24
}
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	08 95       	ret

00000260 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     266:	48 81       	ld	r20, Y
     268:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     26a:	4f 3f       	cpi	r20, 0xFF	; 255
     26c:	2f ef       	ldi	r18, 0xFF	; 255
     26e:	52 07       	cpc	r21, r18
     270:	21 f4       	brne	.+8      	; 0x27a <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     272:	fc 01       	movw	r30, r24
     274:	a7 81       	ldd	r26, Z+7	; 0x07
     276:	b0 85       	ldd	r27, Z+8	; 0x08
     278:	0d c0       	rjmp	.+26     	; 0x294 <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     27a:	dc 01       	movw	r26, r24
     27c:	13 96       	adiw	r26, 0x03	; 3
     27e:	01 c0       	rjmp	.+2      	; 0x282 <vListInsert+0x22>
     280:	df 01       	movw	r26, r30
     282:	12 96       	adiw	r26, 0x02	; 2
     284:	ed 91       	ld	r30, X+
     286:	fc 91       	ld	r31, X
     288:	13 97       	sbiw	r26, 0x03	; 3
     28a:	20 81       	ld	r18, Z
     28c:	31 81       	ldd	r19, Z+1	; 0x01
     28e:	42 17       	cp	r20, r18
     290:	53 07       	cpc	r21, r19
     292:	b0 f7       	brcc	.-20     	; 0x280 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     294:	12 96       	adiw	r26, 0x02	; 2
     296:	ed 91       	ld	r30, X+
     298:	fc 91       	ld	r31, X
     29a:	13 97       	sbiw	r26, 0x03	; 3
     29c:	fb 83       	std	Y+3, r31	; 0x03
     29e:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     2a0:	d5 83       	std	Z+5, r29	; 0x05
     2a2:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     2a4:	bd 83       	std	Y+5, r27	; 0x05
     2a6:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     2a8:	13 96       	adiw	r26, 0x03	; 3
     2aa:	dc 93       	st	X, r29
     2ac:	ce 93       	st	-X, r28
     2ae:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     2b0:	99 87       	std	Y+9, r25	; 0x09
     2b2:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     2b4:	fc 01       	movw	r30, r24
     2b6:	20 81       	ld	r18, Z
     2b8:	2f 5f       	subi	r18, 0xFF	; 255
     2ba:	20 83       	st	Z, r18
}
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	08 95       	ret

000002c2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     2c8:	a0 85       	ldd	r26, Z+8	; 0x08
     2ca:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     2cc:	c2 81       	ldd	r28, Z+2	; 0x02
     2ce:	d3 81       	ldd	r29, Z+3	; 0x03
     2d0:	84 81       	ldd	r24, Z+4	; 0x04
     2d2:	95 81       	ldd	r25, Z+5	; 0x05
     2d4:	9d 83       	std	Y+5, r25	; 0x05
     2d6:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     2d8:	c4 81       	ldd	r28, Z+4	; 0x04
     2da:	d5 81       	ldd	r29, Z+5	; 0x05
     2dc:	82 81       	ldd	r24, Z+2	; 0x02
     2de:	93 81       	ldd	r25, Z+3	; 0x03
     2e0:	9b 83       	std	Y+3, r25	; 0x03
     2e2:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     2e4:	11 96       	adiw	r26, 0x01	; 1
     2e6:	8d 91       	ld	r24, X+
     2e8:	9c 91       	ld	r25, X
     2ea:	12 97       	sbiw	r26, 0x02	; 2
     2ec:	e8 17       	cp	r30, r24
     2ee:	f9 07       	cpc	r31, r25
     2f0:	31 f4       	brne	.+12     	; 0x2fe <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     2f2:	84 81       	ldd	r24, Z+4	; 0x04
     2f4:	95 81       	ldd	r25, Z+5	; 0x05
     2f6:	12 96       	adiw	r26, 0x02	; 2
     2f8:	9c 93       	st	X, r25
     2fa:	8e 93       	st	-X, r24
     2fc:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     2fe:	11 86       	std	Z+9, r1	; 0x09
     300:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     302:	8c 91       	ld	r24, X
     304:	81 50       	subi	r24, 0x01	; 1
     306:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	08 95       	ret

0000030e <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     30e:	31 e1       	ldi	r19, 0x11	; 17
     310:	fc 01       	movw	r30, r24
     312:	30 83       	st	Z, r19
     314:	31 97       	sbiw	r30, 0x01	; 1
     316:	22 e2       	ldi	r18, 0x22	; 34
     318:	20 83       	st	Z, r18
     31a:	31 97       	sbiw	r30, 0x01	; 1
     31c:	a3 e3       	ldi	r26, 0x33	; 51
     31e:	a0 83       	st	Z, r26
     320:	31 97       	sbiw	r30, 0x01	; 1
     322:	60 83       	st	Z, r22
     324:	31 97       	sbiw	r30, 0x01	; 1
     326:	70 83       	st	Z, r23
     328:	31 97       	sbiw	r30, 0x01	; 1
     32a:	10 82       	st	Z, r1
     32c:	31 97       	sbiw	r30, 0x01	; 1
     32e:	60 e8       	ldi	r22, 0x80	; 128
     330:	60 83       	st	Z, r22
     332:	31 97       	sbiw	r30, 0x01	; 1
     334:	10 82       	st	Z, r1
     336:	31 97       	sbiw	r30, 0x01	; 1
     338:	62 e0       	ldi	r22, 0x02	; 2
     33a:	60 83       	st	Z, r22
     33c:	31 97       	sbiw	r30, 0x01	; 1
     33e:	63 e0       	ldi	r22, 0x03	; 3
     340:	60 83       	st	Z, r22
     342:	31 97       	sbiw	r30, 0x01	; 1
     344:	64 e0       	ldi	r22, 0x04	; 4
     346:	60 83       	st	Z, r22
     348:	31 97       	sbiw	r30, 0x01	; 1
     34a:	65 e0       	ldi	r22, 0x05	; 5
     34c:	60 83       	st	Z, r22
     34e:	31 97       	sbiw	r30, 0x01	; 1
     350:	66 e0       	ldi	r22, 0x06	; 6
     352:	60 83       	st	Z, r22
     354:	31 97       	sbiw	r30, 0x01	; 1
     356:	67 e0       	ldi	r22, 0x07	; 7
     358:	60 83       	st	Z, r22
     35a:	31 97       	sbiw	r30, 0x01	; 1
     35c:	68 e0       	ldi	r22, 0x08	; 8
     35e:	60 83       	st	Z, r22
     360:	31 97       	sbiw	r30, 0x01	; 1
     362:	69 e0       	ldi	r22, 0x09	; 9
     364:	60 83       	st	Z, r22
     366:	31 97       	sbiw	r30, 0x01	; 1
     368:	60 e1       	ldi	r22, 0x10	; 16
     36a:	60 83       	st	Z, r22
     36c:	31 97       	sbiw	r30, 0x01	; 1
     36e:	30 83       	st	Z, r19
     370:	31 97       	sbiw	r30, 0x01	; 1
     372:	32 e1       	ldi	r19, 0x12	; 18
     374:	30 83       	st	Z, r19
     376:	31 97       	sbiw	r30, 0x01	; 1
     378:	33 e1       	ldi	r19, 0x13	; 19
     37a:	30 83       	st	Z, r19
     37c:	31 97       	sbiw	r30, 0x01	; 1
     37e:	34 e1       	ldi	r19, 0x14	; 20
     380:	30 83       	st	Z, r19
     382:	31 97       	sbiw	r30, 0x01	; 1
     384:	35 e1       	ldi	r19, 0x15	; 21
     386:	30 83       	st	Z, r19
     388:	31 97       	sbiw	r30, 0x01	; 1
     38a:	36 e1       	ldi	r19, 0x16	; 22
     38c:	30 83       	st	Z, r19
     38e:	31 97       	sbiw	r30, 0x01	; 1
     390:	37 e1       	ldi	r19, 0x17	; 23
     392:	30 83       	st	Z, r19
     394:	31 97       	sbiw	r30, 0x01	; 1
     396:	38 e1       	ldi	r19, 0x18	; 24
     398:	30 83       	st	Z, r19
     39a:	31 97       	sbiw	r30, 0x01	; 1
     39c:	39 e1       	ldi	r19, 0x19	; 25
     39e:	30 83       	st	Z, r19
     3a0:	31 97       	sbiw	r30, 0x01	; 1
     3a2:	30 e2       	ldi	r19, 0x20	; 32
     3a4:	30 83       	st	Z, r19
     3a6:	31 97       	sbiw	r30, 0x01	; 1
     3a8:	31 e2       	ldi	r19, 0x21	; 33
     3aa:	30 83       	st	Z, r19
     3ac:	31 97       	sbiw	r30, 0x01	; 1
     3ae:	20 83       	st	Z, r18
     3b0:	31 97       	sbiw	r30, 0x01	; 1
     3b2:	23 e2       	ldi	r18, 0x23	; 35
     3b4:	20 83       	st	Z, r18
     3b6:	31 97       	sbiw	r30, 0x01	; 1
     3b8:	40 83       	st	Z, r20
     3ba:	31 97       	sbiw	r30, 0x01	; 1
     3bc:	50 83       	st	Z, r21
     3be:	31 97       	sbiw	r30, 0x01	; 1
     3c0:	26 e2       	ldi	r18, 0x26	; 38
     3c2:	20 83       	st	Z, r18
     3c4:	31 97       	sbiw	r30, 0x01	; 1
     3c6:	27 e2       	ldi	r18, 0x27	; 39
     3c8:	20 83       	st	Z, r18
     3ca:	31 97       	sbiw	r30, 0x01	; 1
     3cc:	28 e2       	ldi	r18, 0x28	; 40
     3ce:	20 83       	st	Z, r18
     3d0:	31 97       	sbiw	r30, 0x01	; 1
     3d2:	29 e2       	ldi	r18, 0x29	; 41
     3d4:	20 83       	st	Z, r18
     3d6:	31 97       	sbiw	r30, 0x01	; 1
     3d8:	20 e3       	ldi	r18, 0x30	; 48
     3da:	20 83       	st	Z, r18
     3dc:	31 97       	sbiw	r30, 0x01	; 1
     3de:	21 e3       	ldi	r18, 0x31	; 49
     3e0:	20 83       	st	Z, r18
     3e2:	86 97       	sbiw	r24, 0x26	; 38
     3e4:	08 95       	ret

000003e6 <xPortStartScheduler>:
     3e6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     3ea:	8c e7       	ldi	r24, 0x7C	; 124
     3ec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     3f0:	8b e0       	ldi	r24, 0x0B	; 11
     3f2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     3f6:	ef e6       	ldi	r30, 0x6F	; 111
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	80 81       	ld	r24, Z
     3fc:	82 60       	ori	r24, 0x02	; 2
     3fe:	80 83       	st	Z, r24
     400:	a0 91 b5 07 	lds	r26, 0x07B5	; 0x8007b5 <pxCurrentTCB>
     404:	b0 91 b6 07 	lds	r27, 0x07B6	; 0x8007b6 <pxCurrentTCB+0x1>
     408:	cd 91       	ld	r28, X+
     40a:	cd bf       	out	0x3d, r28	; 61
     40c:	dd 91       	ld	r29, X+
     40e:	de bf       	out	0x3e, r29	; 62
     410:	ff 91       	pop	r31
     412:	ef 91       	pop	r30
     414:	df 91       	pop	r29
     416:	cf 91       	pop	r28
     418:	bf 91       	pop	r27
     41a:	af 91       	pop	r26
     41c:	9f 91       	pop	r25
     41e:	8f 91       	pop	r24
     420:	7f 91       	pop	r23
     422:	6f 91       	pop	r22
     424:	5f 91       	pop	r21
     426:	4f 91       	pop	r20
     428:	3f 91       	pop	r19
     42a:	2f 91       	pop	r18
     42c:	1f 91       	pop	r17
     42e:	0f 91       	pop	r16
     430:	ff 90       	pop	r15
     432:	ef 90       	pop	r14
     434:	df 90       	pop	r13
     436:	cf 90       	pop	r12
     438:	bf 90       	pop	r11
     43a:	af 90       	pop	r10
     43c:	9f 90       	pop	r9
     43e:	8f 90       	pop	r8
     440:	7f 90       	pop	r7
     442:	6f 90       	pop	r6
     444:	5f 90       	pop	r5
     446:	4f 90       	pop	r4
     448:	3f 90       	pop	r3
     44a:	2f 90       	pop	r2
     44c:	1f 90       	pop	r1
     44e:	0f 90       	pop	r0
     450:	0f be       	out	0x3f, r0	; 63
     452:	0f 90       	pop	r0
     454:	08 95       	ret
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	08 95       	ret

0000045a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     45a:	0f 92       	push	r0
     45c:	0f b6       	in	r0, 0x3f	; 63
     45e:	f8 94       	cli
     460:	0f 92       	push	r0
     462:	1f 92       	push	r1
     464:	11 24       	eor	r1, r1
     466:	2f 92       	push	r2
     468:	3f 92       	push	r3
     46a:	4f 92       	push	r4
     46c:	5f 92       	push	r5
     46e:	6f 92       	push	r6
     470:	7f 92       	push	r7
     472:	8f 92       	push	r8
     474:	9f 92       	push	r9
     476:	af 92       	push	r10
     478:	bf 92       	push	r11
     47a:	cf 92       	push	r12
     47c:	df 92       	push	r13
     47e:	ef 92       	push	r14
     480:	ff 92       	push	r15
     482:	0f 93       	push	r16
     484:	1f 93       	push	r17
     486:	2f 93       	push	r18
     488:	3f 93       	push	r19
     48a:	4f 93       	push	r20
     48c:	5f 93       	push	r21
     48e:	6f 93       	push	r22
     490:	7f 93       	push	r23
     492:	8f 93       	push	r24
     494:	9f 93       	push	r25
     496:	af 93       	push	r26
     498:	bf 93       	push	r27
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	ef 93       	push	r30
     4a0:	ff 93       	push	r31
     4a2:	a0 91 b5 07 	lds	r26, 0x07B5	; 0x8007b5 <pxCurrentTCB>
     4a6:	b0 91 b6 07 	lds	r27, 0x07B6	; 0x8007b6 <pxCurrentTCB+0x1>
     4aa:	0d b6       	in	r0, 0x3d	; 61
     4ac:	0d 92       	st	X+, r0
     4ae:	0e b6       	in	r0, 0x3e	; 62
     4b0:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     4b2:	0e 94 29 0a 	call	0x1452	; 0x1452 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     4b6:	a0 91 b5 07 	lds	r26, 0x07B5	; 0x8007b5 <pxCurrentTCB>
     4ba:	b0 91 b6 07 	lds	r27, 0x07B6	; 0x8007b6 <pxCurrentTCB+0x1>
     4be:	cd 91       	ld	r28, X+
     4c0:	cd bf       	out	0x3d, r28	; 61
     4c2:	dd 91       	ld	r29, X+
     4c4:	de bf       	out	0x3e, r29	; 62
     4c6:	ff 91       	pop	r31
     4c8:	ef 91       	pop	r30
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	bf 91       	pop	r27
     4d0:	af 91       	pop	r26
     4d2:	9f 91       	pop	r25
     4d4:	8f 91       	pop	r24
     4d6:	7f 91       	pop	r23
     4d8:	6f 91       	pop	r22
     4da:	5f 91       	pop	r21
     4dc:	4f 91       	pop	r20
     4de:	3f 91       	pop	r19
     4e0:	2f 91       	pop	r18
     4e2:	1f 91       	pop	r17
     4e4:	0f 91       	pop	r16
     4e6:	ff 90       	pop	r15
     4e8:	ef 90       	pop	r14
     4ea:	df 90       	pop	r13
     4ec:	cf 90       	pop	r12
     4ee:	bf 90       	pop	r11
     4f0:	af 90       	pop	r10
     4f2:	9f 90       	pop	r9
     4f4:	8f 90       	pop	r8
     4f6:	7f 90       	pop	r7
     4f8:	6f 90       	pop	r6
     4fa:	5f 90       	pop	r5
     4fc:	4f 90       	pop	r4
     4fe:	3f 90       	pop	r3
     500:	2f 90       	pop	r2
     502:	1f 90       	pop	r1
     504:	0f 90       	pop	r0
     506:	0f be       	out	0x3f, r0	; 63
     508:	0f 90       	pop	r0

	asm volatile ( "ret" );
     50a:	08 95       	ret

0000050c <__vector_16>:
}


ISR(TIMER0_OVF_vect)				//ISR for timer0 overflow
{
     50c:	1f 92       	push	r1
     50e:	0f 92       	push	r0
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	0f 92       	push	r0
     514:	11 24       	eor	r1, r1
  ulIsrHandler[0];	
}
     516:	0f 90       	pop	r0
     518:	0f be       	out	0x3f, r0	; 63
     51a:	0f 90       	pop	r0
     51c:	1f 90       	pop	r1
     51e:	18 95       	reti

00000520 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     520:	0f 92       	push	r0
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	f8 94       	cli
     526:	0f 92       	push	r0
     528:	1f 92       	push	r1
     52a:	11 24       	eor	r1, r1
     52c:	2f 92       	push	r2
     52e:	3f 92       	push	r3
     530:	4f 92       	push	r4
     532:	5f 92       	push	r5
     534:	6f 92       	push	r6
     536:	7f 92       	push	r7
     538:	8f 92       	push	r8
     53a:	9f 92       	push	r9
     53c:	af 92       	push	r10
     53e:	bf 92       	push	r11
     540:	cf 92       	push	r12
     542:	df 92       	push	r13
     544:	ef 92       	push	r14
     546:	ff 92       	push	r15
     548:	0f 93       	push	r16
     54a:	1f 93       	push	r17
     54c:	2f 93       	push	r18
     54e:	3f 93       	push	r19
     550:	4f 93       	push	r20
     552:	5f 93       	push	r21
     554:	6f 93       	push	r22
     556:	7f 93       	push	r23
     558:	8f 93       	push	r24
     55a:	9f 93       	push	r25
     55c:	af 93       	push	r26
     55e:	bf 93       	push	r27
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	ef 93       	push	r30
     566:	ff 93       	push	r31
     568:	a0 91 b5 07 	lds	r26, 0x07B5	; 0x8007b5 <pxCurrentTCB>
     56c:	b0 91 b6 07 	lds	r27, 0x07B6	; 0x8007b6 <pxCurrentTCB+0x1>
     570:	0d b6       	in	r0, 0x3d	; 61
     572:	0d 92       	st	X+, r0
     574:	0e b6       	in	r0, 0x3e	; 62
     576:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     578:	0e 94 ad 08 	call	0x115a	; 0x115a <xTaskIncrementTick>
     57c:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     57e:	0e 94 29 0a 	call	0x1452	; 0x1452 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     582:	a0 91 b5 07 	lds	r26, 0x07B5	; 0x8007b5 <pxCurrentTCB>
     586:	b0 91 b6 07 	lds	r27, 0x07B6	; 0x8007b6 <pxCurrentTCB+0x1>
     58a:	cd 91       	ld	r28, X+
     58c:	cd bf       	out	0x3d, r28	; 61
     58e:	dd 91       	ld	r29, X+
     590:	de bf       	out	0x3e, r29	; 62
     592:	ff 91       	pop	r31
     594:	ef 91       	pop	r30
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	bf 91       	pop	r27
     59c:	af 91       	pop	r26
     59e:	9f 91       	pop	r25
     5a0:	8f 91       	pop	r24
     5a2:	7f 91       	pop	r23
     5a4:	6f 91       	pop	r22
     5a6:	5f 91       	pop	r21
     5a8:	4f 91       	pop	r20
     5aa:	3f 91       	pop	r19
     5ac:	2f 91       	pop	r18
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	ff 90       	pop	r15
     5b4:	ef 90       	pop	r14
     5b6:	df 90       	pop	r13
     5b8:	cf 90       	pop	r12
     5ba:	bf 90       	pop	r11
     5bc:	af 90       	pop	r10
     5be:	9f 90       	pop	r9
     5c0:	8f 90       	pop	r8
     5c2:	7f 90       	pop	r7
     5c4:	6f 90       	pop	r6
     5c6:	5f 90       	pop	r5
     5c8:	4f 90       	pop	r4
     5ca:	3f 90       	pop	r3
     5cc:	2f 90       	pop	r2
     5ce:	1f 90       	pop	r1
     5d0:	0f 90       	pop	r0
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	0f 90       	pop	r0

	asm volatile ( "ret" );
     5d6:	08 95       	ret

000005d8 <__vector_11>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect(void) __attribute__ ((signal, naked));
	void TIMER1_COMPA_vect(void)
	{
		vPortYieldFromTick();
     5d8:	0e 94 90 02 	call	0x520	; 0x520 <vPortYieldFromTick>
		asm volatile ( "reti" );
     5dc:	18 95       	reti

000005de <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     5de:	0f 93       	push	r16
     5e0:	1f 93       	push	r17
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
     5e8:	0e 94 9d 08 	call	0x113a	; 0x113a <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
     5ec:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <__data_end>
     5f0:	81 11       	cpse	r24, r1
     5f2:	1d c0       	rjmp	.+58     	; 0x62e <pvPortMalloc+0x50>
	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     5f4:	e5 e7       	ldi	r30, 0x75	; 117
     5f6:	f1 e0       	ldi	r31, 0x01	; 1
     5f8:	8a e7       	ldi	r24, 0x7A	; 122
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	91 83       	std	Z+1, r25	; 0x01
     5fe:	80 83       	st	Z, r24
	xStart.xBlockSize = ( size_t ) 0;
     600:	13 82       	std	Z+3, r1	; 0x03
     602:	12 82       	std	Z+2, r1	; 0x02

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     604:	e1 e7       	ldi	r30, 0x71	; 113
     606:	f1 e0       	ldi	r31, 0x01	; 1
     608:	8b ed       	ldi	r24, 0xDB	; 219
     60a:	95 e0       	ldi	r25, 0x05	; 5
     60c:	93 83       	std	Z+3, r25	; 0x03
     60e:	82 83       	std	Z+2, r24	; 0x02
	xEnd.pxNextFreeBlock = NULL;
     610:	11 82       	std	Z+1, r1	; 0x01
     612:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     614:	a9 e7       	ldi	r26, 0x79	; 121
     616:	b1 e0       	ldi	r27, 0x01	; 1
     618:	14 96       	adiw	r26, 0x04	; 4
     61a:	9c 93       	st	X, r25
     61c:	8e 93       	st	-X, r24
     61e:	13 97       	sbiw	r26, 0x03	; 3
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     620:	12 96       	adiw	r26, 0x02	; 2
     622:	fc 93       	st	X, r31
     624:	ee 93       	st	-X, r30
     626:	11 97       	sbiw	r26, 0x01	; 1
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
		{
			prvHeapInit();
			xHeapHasBeenInitialised = pdTRUE;
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <__data_end>
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
     62e:	20 97       	sbiw	r28, 0x00	; 0
     630:	09 f4       	brne	.+2      	; 0x634 <pvPortMalloc+0x56>
     632:	5f c0       	rjmp	.+190    	; 0x6f2 <pvPortMalloc+0x114>
		{
			xWantedSize += heapSTRUCT_SIZE;
     634:	9e 01       	movw	r18, r28
     636:	2c 5f       	subi	r18, 0xFC	; 252
     638:	3f 4f       	sbci	r19, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
     63a:	23 96       	adiw	r28, 0x03	; 3
     63c:	ca 3d       	cpi	r28, 0xDA	; 218
     63e:	d5 40       	sbci	r29, 0x05	; 5
     640:	08 f0       	brcs	.+2      	; 0x644 <pvPortMalloc+0x66>
     642:	5a c0       	rjmp	.+180    	; 0x6f8 <pvPortMalloc+0x11a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
     644:	e0 91 75 01 	lds	r30, 0x0175	; 0x800175 <xStart>
     648:	f0 91 76 01 	lds	r31, 0x0176	; 0x800176 <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
     64c:	a5 e7       	ldi	r26, 0x75	; 117
     64e:	b1 e0       	ldi	r27, 0x01	; 1
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     650:	02 c0       	rjmp	.+4      	; 0x656 <pvPortMalloc+0x78>
     652:	df 01       	movw	r26, r30
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
     654:	fc 01       	movw	r30, r24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     656:	82 81       	ldd	r24, Z+2	; 0x02
     658:	93 81       	ldd	r25, Z+3	; 0x03
     65a:	82 17       	cp	r24, r18
     65c:	93 07       	cpc	r25, r19
     65e:	20 f4       	brcc	.+8      	; 0x668 <pvPortMalloc+0x8a>
     660:	80 81       	ld	r24, Z
     662:	91 81       	ldd	r25, Z+1	; 0x01
     664:	00 97       	sbiw	r24, 0x00	; 0
     666:	a9 f7       	brne	.-22     	; 0x652 <pvPortMalloc+0x74>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
     668:	c1 e0       	ldi	r28, 0x01	; 1
     66a:	e1 37       	cpi	r30, 0x71	; 113
     66c:	fc 07       	cpc	r31, r28
     66e:	09 f4       	brne	.+2      	; 0x672 <pvPortMalloc+0x94>
     670:	46 c0       	rjmp	.+140    	; 0x6fe <pvPortMalloc+0x120>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     672:	cd 91       	ld	r28, X+
     674:	dc 91       	ld	r29, X
     676:	11 97       	sbiw	r26, 0x01	; 1
     678:	8e 01       	movw	r16, r28
     67a:	0c 5f       	subi	r16, 0xFC	; 252
     67c:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     67e:	80 81       	ld	r24, Z
     680:	91 81       	ldd	r25, Z+1	; 0x01
     682:	8d 93       	st	X+, r24
     684:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     686:	82 81       	ldd	r24, Z+2	; 0x02
     688:	93 81       	ldd	r25, Z+3	; 0x03
     68a:	82 1b       	sub	r24, r18
     68c:	93 0b       	sbc	r25, r19
     68e:	89 30       	cpi	r24, 0x09	; 9
     690:	91 05       	cpc	r25, r1
     692:	10 f1       	brcs	.+68     	; 0x6d8 <pvPortMalloc+0xfa>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     694:	bf 01       	movw	r22, r30
     696:	62 0f       	add	r22, r18
     698:	73 1f       	adc	r23, r19

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     69a:	db 01       	movw	r26, r22
     69c:	13 96       	adiw	r26, 0x03	; 3
     69e:	9c 93       	st	X, r25
     6a0:	8e 93       	st	-X, r24
     6a2:	12 97       	sbiw	r26, 0x02	; 2
					pxBlock->xBlockSize = xWantedSize;
     6a4:	33 83       	std	Z+3, r19	; 0x03
     6a6:	22 83       	std	Z+2, r18	; 0x02

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     6a8:	12 96       	adiw	r26, 0x02	; 2
     6aa:	4d 91       	ld	r20, X+
     6ac:	5c 91       	ld	r21, X
     6ae:	13 97       	sbiw	r26, 0x03	; 3
     6b0:	85 e7       	ldi	r24, 0x75	; 117
     6b2:	91 e0       	ldi	r25, 0x01	; 1
     6b4:	01 c0       	rjmp	.+2      	; 0x6b8 <pvPortMalloc+0xda>
     6b6:	cd 01       	movw	r24, r26
     6b8:	ec 01       	movw	r28, r24
     6ba:	a8 81       	ld	r26, Y
     6bc:	b9 81       	ldd	r27, Y+1	; 0x01
     6be:	12 96       	adiw	r26, 0x02	; 2
     6c0:	2d 91       	ld	r18, X+
     6c2:	3c 91       	ld	r19, X
     6c4:	13 97       	sbiw	r26, 0x03	; 3
     6c6:	24 17       	cp	r18, r20
     6c8:	35 07       	cpc	r19, r21
     6ca:	a8 f3       	brcs	.-22     	; 0x6b6 <pvPortMalloc+0xd8>
     6cc:	eb 01       	movw	r28, r22
     6ce:	b9 83       	std	Y+1, r27	; 0x01
     6d0:	a8 83       	st	Y, r26
     6d2:	dc 01       	movw	r26, r24
     6d4:	6d 93       	st	X+, r22
     6d6:	7c 93       	st	X, r23
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
     6d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     6dc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     6e0:	22 81       	ldd	r18, Z+2	; 0x02
     6e2:	33 81       	ldd	r19, Z+3	; 0x03
     6e4:	82 1b       	sub	r24, r18
     6e6:	93 0b       	sbc	r25, r19
     6e8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     6ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     6f0:	08 c0       	rjmp	.+16     	; 0x702 <pvPortMalloc+0x124>

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
     6f2:	00 e0       	ldi	r16, 0x00	; 0
     6f4:	10 e0       	ldi	r17, 0x00	; 0
     6f6:	05 c0       	rjmp	.+10     	; 0x702 <pvPortMalloc+0x124>
     6f8:	00 e0       	ldi	r16, 0x00	; 0
     6fa:	10 e0       	ldi	r17, 0x00	; 0
     6fc:	02 c0       	rjmp	.+4      	; 0x702 <pvPortMalloc+0x124>
     6fe:	00 e0       	ldi	r16, 0x00	; 0
     700:	10 e0       	ldi	r17, 0x00	; 0
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     702:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     706:	c8 01       	movw	r24, r16
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	1f 91       	pop	r17
     70e:	0f 91       	pop	r16
     710:	08 95       	ret

00000712 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     712:	0f 93       	push	r16
     714:	1f 93       	push	r17
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     71a:	00 97       	sbiw	r24, 0x00	; 0
     71c:	41 f1       	breq	.+80     	; 0x76e <vPortFree+0x5c>
     71e:	ec 01       	movw	r28, r24
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
     720:	8c 01       	movw	r16, r24
     722:	04 50       	subi	r16, 0x04	; 4
     724:	11 09       	sbc	r17, r1

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
     726:	0e 94 9d 08 	call	0x113a	; 0x113a <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     72a:	f8 01       	movw	r30, r16
     72c:	42 81       	ldd	r20, Z+2	; 0x02
     72e:	53 81       	ldd	r21, Z+3	; 0x03
     730:	a5 e7       	ldi	r26, 0x75	; 117
     732:	b1 e0       	ldi	r27, 0x01	; 1
     734:	01 c0       	rjmp	.+2      	; 0x738 <vPortFree+0x26>
     736:	df 01       	movw	r26, r30
     738:	ed 91       	ld	r30, X+
     73a:	fc 91       	ld	r31, X
     73c:	11 97       	sbiw	r26, 0x01	; 1
     73e:	22 81       	ldd	r18, Z+2	; 0x02
     740:	33 81       	ldd	r19, Z+3	; 0x03
     742:	24 17       	cp	r18, r20
     744:	35 07       	cpc	r19, r21
     746:	b8 f3       	brcs	.-18     	; 0x736 <vPortFree+0x24>
     748:	24 97       	sbiw	r28, 0x04	; 4
     74a:	f9 83       	std	Y+1, r31	; 0x01
     74c:	e8 83       	st	Y, r30
     74e:	0d 93       	st	X+, r16
     750:	1c 93       	st	X, r17
			xFreeBytesRemaining += pxLink->xBlockSize;
     752:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     756:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     75a:	8a 81       	ldd	r24, Y+2	; 0x02
     75c:	9b 81       	ldd	r25, Y+3	; 0x03
     75e:	82 0f       	add	r24, r18
     760:	93 1f       	adc	r25, r19
     762:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     766:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
     76a:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <xTaskResumeAll>
	}
}
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	08 95       	ret

00000778 <prvCopyDataToQueue>:
	{
		vQueueUnregisterQueue( pxQueue );
	}
	#endif
	vPortFree( pxQueue );
}
     778:	1f 93       	push	r17
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	ec 01       	movw	r28, r24
     780:	14 2f       	mov	r17, r20
     782:	4c 8d       	ldd	r20, Y+28	; 0x1c
     784:	44 23       	and	r20, r20
     786:	d9 f1       	breq	.+118    	; 0x7fe <prvCopyDataToQueue+0x86>
     788:	11 11       	cpse	r17, r1
     78a:	16 c0       	rjmp	.+44     	; 0x7b8 <prvCopyDataToQueue+0x40>
     78c:	50 e0       	ldi	r21, 0x00	; 0
     78e:	8c 81       	ldd	r24, Y+4	; 0x04
     790:	9d 81       	ldd	r25, Y+5	; 0x05
     792:	0e 94 65 0e 	call	0x1cca	; 0x1cca <memcpy>
     796:	2c 8d       	ldd	r18, Y+28	; 0x1c
     798:	8c 81       	ldd	r24, Y+4	; 0x04
     79a:	9d 81       	ldd	r25, Y+5	; 0x05
     79c:	82 0f       	add	r24, r18
     79e:	91 1d       	adc	r25, r1
     7a0:	9d 83       	std	Y+5, r25	; 0x05
     7a2:	8c 83       	std	Y+4, r24	; 0x04
     7a4:	2a 81       	ldd	r18, Y+2	; 0x02
     7a6:	3b 81       	ldd	r19, Y+3	; 0x03
     7a8:	82 17       	cp	r24, r18
     7aa:	93 07       	cpc	r25, r19
     7ac:	40 f1       	brcs	.+80     	; 0x7fe <prvCopyDataToQueue+0x86>
     7ae:	88 81       	ld	r24, Y
     7b0:	99 81       	ldd	r25, Y+1	; 0x01
     7b2:	9d 83       	std	Y+5, r25	; 0x05
     7b4:	8c 83       	std	Y+4, r24	; 0x04
     7b6:	23 c0       	rjmp	.+70     	; 0x7fe <prvCopyDataToQueue+0x86>
     7b8:	50 e0       	ldi	r21, 0x00	; 0
     7ba:	8e 81       	ldd	r24, Y+6	; 0x06
     7bc:	9f 81       	ldd	r25, Y+7	; 0x07
     7be:	0e 94 65 0e 	call	0x1cca	; 0x1cca <memcpy>
     7c2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	91 95       	neg	r25
     7c8:	81 95       	neg	r24
     7ca:	91 09       	sbc	r25, r1
     7cc:	2e 81       	ldd	r18, Y+6	; 0x06
     7ce:	3f 81       	ldd	r19, Y+7	; 0x07
     7d0:	28 0f       	add	r18, r24
     7d2:	39 1f       	adc	r19, r25
     7d4:	3f 83       	std	Y+7, r19	; 0x07
     7d6:	2e 83       	std	Y+6, r18	; 0x06
     7d8:	48 81       	ld	r20, Y
     7da:	59 81       	ldd	r21, Y+1	; 0x01
     7dc:	24 17       	cp	r18, r20
     7de:	35 07       	cpc	r19, r21
     7e0:	30 f4       	brcc	.+12     	; 0x7ee <prvCopyDataToQueue+0x76>
     7e2:	2a 81       	ldd	r18, Y+2	; 0x02
     7e4:	3b 81       	ldd	r19, Y+3	; 0x03
     7e6:	82 0f       	add	r24, r18
     7e8:	93 1f       	adc	r25, r19
     7ea:	9f 83       	std	Y+7, r25	; 0x07
     7ec:	8e 83       	std	Y+6, r24	; 0x06
     7ee:	12 30       	cpi	r17, 0x02	; 2
     7f0:	31 f4       	brne	.+12     	; 0x7fe <prvCopyDataToQueue+0x86>
     7f2:	8a 8d       	ldd	r24, Y+26	; 0x1a
     7f4:	88 23       	and	r24, r24
     7f6:	19 f0       	breq	.+6      	; 0x7fe <prvCopyDataToQueue+0x86>
     7f8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     7fa:	81 50       	subi	r24, 0x01	; 1
     7fc:	8a 8f       	std	Y+26, r24	; 0x1a
     7fe:	8a 8d       	ldd	r24, Y+26	; 0x1a
     800:	8f 5f       	subi	r24, 0xFF	; 255
     802:	8a 8f       	std	Y+26, r24	; 0x1a
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	1f 91       	pop	r17
     80c:	08 95       	ret

0000080e <prvNotifyQueueSetContainer>:
     80e:	ff 92       	push	r15
     810:	0f 93       	push	r16
     812:	1f 93       	push	r17
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	00 d0       	rcall	.+0      	; 0x81a <prvNotifyQueueSetContainer+0xc>
     81a:	cd b7       	in	r28, 0x3d	; 61
     81c:	de b7       	in	r29, 0x3e	; 62
     81e:	9a 83       	std	Y+2, r25	; 0x02
     820:	89 83       	std	Y+1, r24	; 0x01
     822:	fc 01       	movw	r30, r24
     824:	07 8d       	ldd	r16, Z+31	; 0x1f
     826:	10 a1       	ldd	r17, Z+32	; 0x20
     828:	f8 01       	movw	r30, r16
     82a:	92 8d       	ldd	r25, Z+26	; 0x1a
     82c:	83 8d       	ldd	r24, Z+27	; 0x1b
     82e:	98 17       	cp	r25, r24
     830:	e8 f4       	brcc	.+58     	; 0x86c <prvNotifyQueueSetContainer+0x5e>
     832:	46 2f       	mov	r20, r22
     834:	be 01       	movw	r22, r28
     836:	6f 5f       	subi	r22, 0xFF	; 255
     838:	7f 4f       	sbci	r23, 0xFF	; 255
     83a:	c8 01       	movw	r24, r16
     83c:	0e 94 bc 03 	call	0x778	; 0x778 <prvCopyDataToQueue>
     840:	f8 2e       	mov	r15, r24
     842:	f8 01       	movw	r30, r16
     844:	86 8d       	ldd	r24, Z+30	; 0x1e
     846:	8f 3f       	cpi	r24, 0xFF	; 255
     848:	61 f4       	brne	.+24     	; 0x862 <prvNotifyQueueSetContainer+0x54>
     84a:	81 89       	ldd	r24, Z+17	; 0x11
     84c:	88 23       	and	r24, r24
     84e:	79 f0       	breq	.+30     	; 0x86e <prvNotifyQueueSetContainer+0x60>
     850:	c8 01       	movw	r24, r16
     852:	41 96       	adiw	r24, 0x11	; 17
     854:	0e 94 df 0a 	call	0x15be	; 0x15be <xTaskRemoveFromEventList>
     858:	88 23       	and	r24, r24
     85a:	49 f0       	breq	.+18     	; 0x86e <prvNotifyQueueSetContainer+0x60>
     85c:	ff 24       	eor	r15, r15
     85e:	f3 94       	inc	r15
     860:	06 c0       	rjmp	.+12     	; 0x86e <prvNotifyQueueSetContainer+0x60>
     862:	f8 01       	movw	r30, r16
     864:	86 8d       	ldd	r24, Z+30	; 0x1e
     866:	8f 5f       	subi	r24, 0xFF	; 255
     868:	86 8f       	std	Z+30, r24	; 0x1e
     86a:	01 c0       	rjmp	.+2      	; 0x86e <prvNotifyQueueSetContainer+0x60>
     86c:	f1 2c       	mov	r15, r1
     86e:	8f 2d       	mov	r24, r15
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	1f 91       	pop	r17
     87a:	0f 91       	pop	r16
     87c:	ff 90       	pop	r15
     87e:	08 95       	ret

00000880 <prvCopyDataFromQueue>:
     880:	fc 01       	movw	r30, r24
     882:	44 8d       	ldd	r20, Z+28	; 0x1c
     884:	44 23       	and	r20, r20
     886:	a9 f0       	breq	.+42     	; 0x8b2 <prvCopyDataFromQueue+0x32>
     888:	50 e0       	ldi	r21, 0x00	; 0
     88a:	26 81       	ldd	r18, Z+6	; 0x06
     88c:	37 81       	ldd	r19, Z+7	; 0x07
     88e:	24 0f       	add	r18, r20
     890:	35 1f       	adc	r19, r21
     892:	37 83       	std	Z+7, r19	; 0x07
     894:	26 83       	std	Z+6, r18	; 0x06
     896:	82 81       	ldd	r24, Z+2	; 0x02
     898:	93 81       	ldd	r25, Z+3	; 0x03
     89a:	28 17       	cp	r18, r24
     89c:	39 07       	cpc	r19, r25
     89e:	20 f0       	brcs	.+8      	; 0x8a8 <prvCopyDataFromQueue+0x28>
     8a0:	80 81       	ld	r24, Z
     8a2:	91 81       	ldd	r25, Z+1	; 0x01
     8a4:	97 83       	std	Z+7, r25	; 0x07
     8a6:	86 83       	std	Z+6, r24	; 0x06
     8a8:	cb 01       	movw	r24, r22
     8aa:	66 81       	ldd	r22, Z+6	; 0x06
     8ac:	77 81       	ldd	r23, Z+7	; 0x07
     8ae:	0e 94 65 0e 	call	0x1cca	; 0x1cca <memcpy>
     8b2:	08 95       	ret

000008b4 <prvUnlockQueue>:
     8b4:	0f 93       	push	r16
     8b6:	1f 93       	push	r17
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	ec 01       	movw	r28, r24
     8be:	0f b6       	in	r0, 0x3f	; 63
     8c0:	f8 94       	cli
     8c2:	0f 92       	push	r0
     8c4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     8c6:	18 16       	cp	r1, r24
     8c8:	fc f4       	brge	.+62     	; 0x908 <__stack+0x9>
     8ca:	8e 01       	movw	r16, r28
     8cc:	0f 5e       	subi	r16, 0xEF	; 239
     8ce:	1f 4f       	sbci	r17, 0xFF	; 255
     8d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8d2:	98 a1       	ldd	r25, Y+32	; 0x20
     8d4:	89 2b       	or	r24, r25
     8d6:	49 f0       	breq	.+18     	; 0x8ea <prvUnlockQueue+0x36>
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	ce 01       	movw	r24, r28
     8dc:	0e 94 07 04 	call	0x80e	; 0x80e <prvNotifyQueueSetContainer>
     8e0:	81 30       	cpi	r24, 0x01	; 1
     8e2:	61 f4       	brne	.+24     	; 0x8fc <prvUnlockQueue+0x48>
     8e4:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <vTaskMissedYield>
     8e8:	09 c0       	rjmp	.+18     	; 0x8fc <prvUnlockQueue+0x48>
     8ea:	89 89       	ldd	r24, Y+17	; 0x11
     8ec:	88 23       	and	r24, r24
     8ee:	61 f0       	breq	.+24     	; 0x908 <__stack+0x9>
     8f0:	c8 01       	movw	r24, r16
     8f2:	0e 94 df 0a 	call	0x15be	; 0x15be <xTaskRemoveFromEventList>
     8f6:	81 11       	cpse	r24, r1
     8f8:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <vTaskMissedYield>
     8fc:	8e 8d       	ldd	r24, Y+30	; 0x1e
     8fe:	81 50       	subi	r24, 0x01	; 1
     900:	8e 8f       	std	Y+30, r24	; 0x1e
     902:	8e 8d       	ldd	r24, Y+30	; 0x1e
     904:	18 16       	cp	r1, r24
     906:	24 f3       	brlt	.-56     	; 0x8d0 <prvUnlockQueue+0x1c>
     908:	8f ef       	ldi	r24, 0xFF	; 255
     90a:	8e 8f       	std	Y+30, r24	; 0x1e
     90c:	0f 90       	pop	r0
     90e:	0f be       	out	0x3f, r0	; 63
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	f8 94       	cli
     914:	0f 92       	push	r0
     916:	8d 8d       	ldd	r24, Y+29	; 0x1d
     918:	18 16       	cp	r1, r24
     91a:	bc f4       	brge	.+46     	; 0x94a <__stack+0x4b>
     91c:	88 85       	ldd	r24, Y+8	; 0x08
     91e:	81 11       	cpse	r24, r1
     920:	05 c0       	rjmp	.+10     	; 0x92c <__stack+0x2d>
     922:	13 c0       	rjmp	.+38     	; 0x94a <__stack+0x4b>
     924:	88 85       	ldd	r24, Y+8	; 0x08
     926:	81 11       	cpse	r24, r1
     928:	04 c0       	rjmp	.+8      	; 0x932 <__stack+0x33>
     92a:	0f c0       	rjmp	.+30     	; 0x94a <__stack+0x4b>
     92c:	8e 01       	movw	r16, r28
     92e:	08 5f       	subi	r16, 0xF8	; 248
     930:	1f 4f       	sbci	r17, 0xFF	; 255
     932:	c8 01       	movw	r24, r16
     934:	0e 94 df 0a 	call	0x15be	; 0x15be <xTaskRemoveFromEventList>
     938:	81 11       	cpse	r24, r1
     93a:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <vTaskMissedYield>
     93e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     940:	81 50       	subi	r24, 0x01	; 1
     942:	8d 8f       	std	Y+29, r24	; 0x1d
     944:	8d 8d       	ldd	r24, Y+29	; 0x1d
     946:	18 16       	cp	r1, r24
     948:	6c f3       	brlt	.-38     	; 0x924 <__stack+0x25>
     94a:	8f ef       	ldi	r24, 0xFF	; 255
     94c:	8d 8f       	std	Y+29, r24	; 0x1d
     94e:	0f 90       	pop	r0
     950:	0f be       	out	0x3f, r0	; 63
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	1f 91       	pop	r17
     958:	0f 91       	pop	r16
     95a:	08 95       	ret

0000095c <xQueueGenericReset>:
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	ec 01       	movw	r28, r24
     962:	0f b6       	in	r0, 0x3f	; 63
     964:	f8 94       	cli
     966:	0f 92       	push	r0
     968:	48 81       	ld	r20, Y
     96a:	59 81       	ldd	r21, Y+1	; 0x01
     96c:	2c 8d       	ldd	r18, Y+28	; 0x1c
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	7b 8d       	ldd	r23, Y+27	; 0x1b
     972:	72 9f       	mul	r23, r18
     974:	c0 01       	movw	r24, r0
     976:	73 9f       	mul	r23, r19
     978:	90 0d       	add	r25, r0
     97a:	11 24       	eor	r1, r1
     97c:	fa 01       	movw	r30, r20
     97e:	e8 0f       	add	r30, r24
     980:	f9 1f       	adc	r31, r25
     982:	fb 83       	std	Y+3, r31	; 0x03
     984:	ea 83       	std	Y+2, r30	; 0x02
     986:	1a 8e       	std	Y+26, r1	; 0x1a
     988:	5d 83       	std	Y+5, r21	; 0x05
     98a:	4c 83       	std	Y+4, r20	; 0x04
     98c:	82 1b       	sub	r24, r18
     98e:	93 0b       	sbc	r25, r19
     990:	84 0f       	add	r24, r20
     992:	95 1f       	adc	r25, r21
     994:	9f 83       	std	Y+7, r25	; 0x07
     996:	8e 83       	std	Y+6, r24	; 0x06
     998:	8f ef       	ldi	r24, 0xFF	; 255
     99a:	8d 8f       	std	Y+29, r24	; 0x1d
     99c:	8e 8f       	std	Y+30, r24	; 0x1e
     99e:	61 11       	cpse	r22, r1
     9a0:	0c c0       	rjmp	.+24     	; 0x9ba <xQueueGenericReset+0x5e>
     9a2:	88 85       	ldd	r24, Y+8	; 0x08
     9a4:	88 23       	and	r24, r24
     9a6:	89 f0       	breq	.+34     	; 0x9ca <xQueueGenericReset+0x6e>
     9a8:	ce 01       	movw	r24, r28
     9aa:	08 96       	adiw	r24, 0x08	; 8
     9ac:	0e 94 df 0a 	call	0x15be	; 0x15be <xTaskRemoveFromEventList>
     9b0:	81 30       	cpi	r24, 0x01	; 1
     9b2:	59 f4       	brne	.+22     	; 0x9ca <xQueueGenericReset+0x6e>
     9b4:	0e 94 2d 02 	call	0x45a	; 0x45a <vPortYield>
     9b8:	08 c0       	rjmp	.+16     	; 0x9ca <xQueueGenericReset+0x6e>
     9ba:	ce 01       	movw	r24, r28
     9bc:	08 96       	adiw	r24, 0x08	; 8
     9be:	0e 94 fd 00 	call	0x1fa	; 0x1fa <vListInitialise>
     9c2:	ce 01       	movw	r24, r28
     9c4:	41 96       	adiw	r24, 0x11	; 17
     9c6:	0e 94 fd 00 	call	0x1fa	; 0x1fa <vListInitialise>
     9ca:	0f 90       	pop	r0
     9cc:	0f be       	out	0x3f, r0	; 63
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	08 95       	ret

000009d6 <xQueueGenericCreate>:
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	08 2f       	mov	r16, r24
     9e0:	16 2f       	mov	r17, r22
     9e2:	66 23       	and	r22, r22
     9e4:	c9 f0       	breq	.+50     	; 0xa18 <xQueueGenericCreate+0x42>
     9e6:	86 9f       	mul	r24, r22
     9e8:	c0 01       	movw	r24, r0
     9ea:	11 24       	eor	r1, r1
     9ec:	82 96       	adiw	r24, 0x22	; 34
     9ee:	0e 94 ef 02 	call	0x5de	; 0x5de <pvPortMalloc>
     9f2:	ec 01       	movw	r28, r24
     9f4:	00 97       	sbiw	r24, 0x00	; 0
     9f6:	21 f4       	brne	.+8      	; 0xa00 <xQueueGenericCreate+0x2a>
     9f8:	16 c0       	rjmp	.+44     	; 0xa26 <xQueueGenericCreate+0x50>
     9fa:	d9 83       	std	Y+1, r29	; 0x01
     9fc:	c8 83       	st	Y, r28
     9fe:	03 c0       	rjmp	.+6      	; 0xa06 <xQueueGenericCreate+0x30>
     a00:	81 96       	adiw	r24, 0x21	; 33
     a02:	99 83       	std	Y+1, r25	; 0x01
     a04:	88 83       	st	Y, r24
     a06:	0b 8f       	std	Y+27, r16	; 0x1b
     a08:	1c 8f       	std	Y+28, r17	; 0x1c
     a0a:	61 e0       	ldi	r22, 0x01	; 1
     a0c:	ce 01       	movw	r24, r28
     a0e:	0e 94 ae 04 	call	0x95c	; 0x95c <xQueueGenericReset>
     a12:	18 a2       	std	Y+32, r1	; 0x20
     a14:	1f 8e       	std	Y+31, r1	; 0x1f
     a16:	07 c0       	rjmp	.+14     	; 0xa26 <xQueueGenericCreate+0x50>
     a18:	81 e2       	ldi	r24, 0x21	; 33
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	0e 94 ef 02 	call	0x5de	; 0x5de <pvPortMalloc>
     a20:	ec 01       	movw	r28, r24
     a22:	89 2b       	or	r24, r25
     a24:	51 f7       	brne	.-44     	; 0x9fa <xQueueGenericCreate+0x24>
     a26:	ce 01       	movw	r24, r28
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	08 95       	ret

00000a32 <xQueueGenericSend>:
     a32:	9f 92       	push	r9
     a34:	af 92       	push	r10
     a36:	bf 92       	push	r11
     a38:	cf 92       	push	r12
     a3a:	df 92       	push	r13
     a3c:	ef 92       	push	r14
     a3e:	ff 92       	push	r15
     a40:	0f 93       	push	r16
     a42:	1f 93       	push	r17
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	00 d0       	rcall	.+0      	; 0xa4a <xQueueGenericSend+0x18>
     a4a:	00 d0       	rcall	.+0      	; 0xa4c <xQueueGenericSend+0x1a>
     a4c:	1f 92       	push	r1
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
     a52:	8c 01       	movw	r16, r24
     a54:	6b 01       	movw	r12, r22
     a56:	5d 83       	std	Y+5, r21	; 0x05
     a58:	4c 83       	std	Y+4, r20	; 0x04
     a5a:	a2 2e       	mov	r10, r18
     a5c:	b1 2c       	mov	r11, r1
     a5e:	99 24       	eor	r9, r9
     a60:	93 94       	inc	r9
     a62:	7c 01       	movw	r14, r24
     a64:	88 e0       	ldi	r24, 0x08	; 8
     a66:	e8 0e       	add	r14, r24
     a68:	f1 1c       	adc	r15, r1
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	f8 94       	cli
     a6e:	0f 92       	push	r0
     a70:	f8 01       	movw	r30, r16
     a72:	92 8d       	ldd	r25, Z+26	; 0x1a
     a74:	83 8d       	ldd	r24, Z+27	; 0x1b
     a76:	98 17       	cp	r25, r24
     a78:	18 f0       	brcs	.+6      	; 0xa80 <xQueueGenericSend+0x4e>
     a7a:	f2 e0       	ldi	r31, 0x02	; 2
     a7c:	af 12       	cpse	r10, r31
     a7e:	27 c0       	rjmp	.+78     	; 0xace <xQueueGenericSend+0x9c>
     a80:	4a 2d       	mov	r20, r10
     a82:	b6 01       	movw	r22, r12
     a84:	c8 01       	movw	r24, r16
     a86:	0e 94 bc 03 	call	0x778	; 0x778 <prvCopyDataToQueue>
     a8a:	f8 01       	movw	r30, r16
     a8c:	27 8d       	ldd	r18, Z+31	; 0x1f
     a8e:	30 a1       	ldd	r19, Z+32	; 0x20
     a90:	23 2b       	or	r18, r19
     a92:	49 f0       	breq	.+18     	; 0xaa6 <xQueueGenericSend+0x74>
     a94:	6a 2d       	mov	r22, r10
     a96:	c8 01       	movw	r24, r16
     a98:	0e 94 07 04 	call	0x80e	; 0x80e <prvNotifyQueueSetContainer>
     a9c:	81 30       	cpi	r24, 0x01	; 1
     a9e:	99 f4       	brne	.+38     	; 0xac6 <xQueueGenericSend+0x94>
     aa0:	0e 94 2d 02 	call	0x45a	; 0x45a <vPortYield>
     aa4:	10 c0       	rjmp	.+32     	; 0xac6 <xQueueGenericSend+0x94>
     aa6:	f8 01       	movw	r30, r16
     aa8:	91 89       	ldd	r25, Z+17	; 0x11
     aaa:	99 23       	and	r25, r25
     aac:	49 f0       	breq	.+18     	; 0xac0 <xQueueGenericSend+0x8e>
     aae:	c8 01       	movw	r24, r16
     ab0:	41 96       	adiw	r24, 0x11	; 17
     ab2:	0e 94 df 0a 	call	0x15be	; 0x15be <xTaskRemoveFromEventList>
     ab6:	81 30       	cpi	r24, 0x01	; 1
     ab8:	31 f4       	brne	.+12     	; 0xac6 <xQueueGenericSend+0x94>
     aba:	0e 94 2d 02 	call	0x45a	; 0x45a <vPortYield>
     abe:	03 c0       	rjmp	.+6      	; 0xac6 <xQueueGenericSend+0x94>
     ac0:	81 11       	cpse	r24, r1
     ac2:	0e 94 2d 02 	call	0x45a	; 0x45a <vPortYield>
     ac6:	0f 90       	pop	r0
     ac8:	0f be       	out	0x3f, r0	; 63
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	50 c0       	rjmp	.+160    	; 0xb6e <xQueueGenericSend+0x13c>
     ace:	8c 81       	ldd	r24, Y+4	; 0x04
     ad0:	9d 81       	ldd	r25, Y+5	; 0x05
     ad2:	89 2b       	or	r24, r25
     ad4:	21 f4       	brne	.+8      	; 0xade <xQueueGenericSend+0xac>
     ad6:	0f 90       	pop	r0
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	48 c0       	rjmp	.+144    	; 0xb6e <xQueueGenericSend+0x13c>
     ade:	b1 10       	cpse	r11, r1
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <xQueueGenericSend+0xba>
     ae2:	ce 01       	movw	r24, r28
     ae4:	01 96       	adiw	r24, 0x01	; 1
     ae6:	0e 94 27 0b 	call	0x164e	; 0x164e <vTaskSetTimeOutState>
     aea:	b9 2c       	mov	r11, r9
     aec:	0f 90       	pop	r0
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	0e 94 9d 08 	call	0x113a	; 0x113a <vTaskSuspendAll>
     af4:	0f b6       	in	r0, 0x3f	; 63
     af6:	f8 94       	cli
     af8:	0f 92       	push	r0
     afa:	f8 01       	movw	r30, r16
     afc:	85 8d       	ldd	r24, Z+29	; 0x1d
     afe:	8f 3f       	cpi	r24, 0xFF	; 255
     b00:	09 f4       	brne	.+2      	; 0xb04 <xQueueGenericSend+0xd2>
     b02:	15 8e       	std	Z+29, r1	; 0x1d
     b04:	f8 01       	movw	r30, r16
     b06:	86 8d       	ldd	r24, Z+30	; 0x1e
     b08:	8f 3f       	cpi	r24, 0xFF	; 255
     b0a:	09 f4       	brne	.+2      	; 0xb0e <xQueueGenericSend+0xdc>
     b0c:	16 8e       	std	Z+30, r1	; 0x1e
     b0e:	0f 90       	pop	r0
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	be 01       	movw	r22, r28
     b14:	6c 5f       	subi	r22, 0xFC	; 252
     b16:	7f 4f       	sbci	r23, 0xFF	; 255
     b18:	ce 01       	movw	r24, r28
     b1a:	01 96       	adiw	r24, 0x01	; 1
     b1c:	0e 94 32 0b 	call	0x1664	; 0x1664 <xTaskCheckForTimeOut>
     b20:	81 11       	cpse	r24, r1
     b22:	1f c0       	rjmp	.+62     	; 0xb62 <xQueueGenericSend+0x130>
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	f8 94       	cli
     b28:	0f 92       	push	r0
     b2a:	f8 01       	movw	r30, r16
     b2c:	92 8d       	ldd	r25, Z+26	; 0x1a
     b2e:	0f 90       	pop	r0
     b30:	0f be       	out	0x3f, r0	; 63
     b32:	83 8d       	ldd	r24, Z+27	; 0x1b
     b34:	98 13       	cpse	r25, r24
     b36:	0f c0       	rjmp	.+30     	; 0xb56 <xQueueGenericSend+0x124>
     b38:	6c 81       	ldd	r22, Y+4	; 0x04
     b3a:	7d 81       	ldd	r23, Y+5	; 0x05
     b3c:	c7 01       	movw	r24, r14
     b3e:	0e 94 96 0a 	call	0x152c	; 0x152c <vTaskPlaceOnEventList>
     b42:	c8 01       	movw	r24, r16
     b44:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <prvUnlockQueue>
     b48:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <xTaskResumeAll>
     b4c:	81 11       	cpse	r24, r1
     b4e:	8d cf       	rjmp	.-230    	; 0xa6a <xQueueGenericSend+0x38>
     b50:	0e 94 2d 02 	call	0x45a	; 0x45a <vPortYield>
     b54:	8a cf       	rjmp	.-236    	; 0xa6a <xQueueGenericSend+0x38>
     b56:	c8 01       	movw	r24, r16
     b58:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <prvUnlockQueue>
     b5c:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <xTaskResumeAll>
     b60:	84 cf       	rjmp	.-248    	; 0xa6a <xQueueGenericSend+0x38>
     b62:	c8 01       	movw	r24, r16
     b64:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <prvUnlockQueue>
     b68:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <xTaskResumeAll>
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	0f 90       	pop	r0
     b70:	0f 90       	pop	r0
     b72:	0f 90       	pop	r0
     b74:	0f 90       	pop	r0
     b76:	0f 90       	pop	r0
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	1f 91       	pop	r17
     b7e:	0f 91       	pop	r16
     b80:	ff 90       	pop	r15
     b82:	ef 90       	pop	r14
     b84:	df 90       	pop	r13
     b86:	cf 90       	pop	r12
     b88:	bf 90       	pop	r11
     b8a:	af 90       	pop	r10
     b8c:	9f 90       	pop	r9
     b8e:	08 95       	ret

00000b90 <xQueueGenericSendFromISR>:
     b90:	ef 92       	push	r14
     b92:	ff 92       	push	r15
     b94:	1f 93       	push	r17
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
     b9a:	fa 01       	movw	r30, r20
     b9c:	dc 01       	movw	r26, r24
     b9e:	5a 96       	adiw	r26, 0x1a	; 26
     ba0:	5c 91       	ld	r21, X
     ba2:	5a 97       	sbiw	r26, 0x1a	; 26
     ba4:	5b 96       	adiw	r26, 0x1b	; 27
     ba6:	3c 91       	ld	r19, X
     ba8:	53 17       	cp	r21, r19
     baa:	10 f0       	brcs	.+4      	; 0xbb0 <xQueueGenericSendFromISR+0x20>
     bac:	22 30       	cpi	r18, 0x02	; 2
     bae:	71 f5       	brne	.+92     	; 0xc0c <xQueueGenericSendFromISR+0x7c>
     bb0:	12 2f       	mov	r17, r18
     bb2:	7f 01       	movw	r14, r30
     bb4:	ec 01       	movw	r28, r24
     bb6:	42 2f       	mov	r20, r18
     bb8:	0e 94 bc 03 	call	0x778	; 0x778 <prvCopyDataToQueue>
     bbc:	8e 8d       	ldd	r24, Y+30	; 0x1e
     bbe:	8f 3f       	cpi	r24, 0xFF	; 255
     bc0:	01 f5       	brne	.+64     	; 0xc02 <xQueueGenericSendFromISR+0x72>
     bc2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     bc4:	98 a1       	ldd	r25, Y+32	; 0x20
     bc6:	89 2b       	or	r24, r25
     bc8:	61 f0       	breq	.+24     	; 0xbe2 <xQueueGenericSendFromISR+0x52>
     bca:	61 2f       	mov	r22, r17
     bcc:	ce 01       	movw	r24, r28
     bce:	0e 94 07 04 	call	0x80e	; 0x80e <prvNotifyQueueSetContainer>
     bd2:	81 30       	cpi	r24, 0x01	; 1
     bd4:	e9 f4       	brne	.+58     	; 0xc10 <xQueueGenericSendFromISR+0x80>
     bd6:	e1 14       	cp	r14, r1
     bd8:	f1 04       	cpc	r15, r1
     bda:	e1 f0       	breq	.+56     	; 0xc14 <xQueueGenericSendFromISR+0x84>
     bdc:	f7 01       	movw	r30, r14
     bde:	80 83       	st	Z, r24
     be0:	20 c0       	rjmp	.+64     	; 0xc22 <xQueueGenericSendFromISR+0x92>
     be2:	89 89       	ldd	r24, Y+17	; 0x11
     be4:	88 23       	and	r24, r24
     be6:	c1 f0       	breq	.+48     	; 0xc18 <xQueueGenericSendFromISR+0x88>
     be8:	ce 01       	movw	r24, r28
     bea:	41 96       	adiw	r24, 0x11	; 17
     bec:	0e 94 df 0a 	call	0x15be	; 0x15be <xTaskRemoveFromEventList>
     bf0:	88 23       	and	r24, r24
     bf2:	a1 f0       	breq	.+40     	; 0xc1c <xQueueGenericSendFromISR+0x8c>
     bf4:	e1 14       	cp	r14, r1
     bf6:	f1 04       	cpc	r15, r1
     bf8:	99 f0       	breq	.+38     	; 0xc20 <xQueueGenericSendFromISR+0x90>
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	d7 01       	movw	r26, r14
     bfe:	8c 93       	st	X, r24
     c00:	10 c0       	rjmp	.+32     	; 0xc22 <xQueueGenericSendFromISR+0x92>
     c02:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c04:	8f 5f       	subi	r24, 0xFF	; 255
     c06:	8e 8f       	std	Y+30, r24	; 0x1e
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	0b c0       	rjmp	.+22     	; 0xc22 <xQueueGenericSendFromISR+0x92>
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	09 c0       	rjmp	.+18     	; 0xc22 <xQueueGenericSendFromISR+0x92>
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	07 c0       	rjmp	.+14     	; 0xc22 <xQueueGenericSendFromISR+0x92>
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	05 c0       	rjmp	.+10     	; 0xc22 <xQueueGenericSendFromISR+0x92>
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	03 c0       	rjmp	.+6      	; 0xc22 <xQueueGenericSendFromISR+0x92>
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	01 c0       	rjmp	.+2      	; 0xc22 <xQueueGenericSendFromISR+0x92>
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	1f 91       	pop	r17
     c28:	ff 90       	pop	r15
     c2a:	ef 90       	pop	r14
     c2c:	08 95       	ret

00000c2e <xQueueGenericReceive>:
     c2e:	9f 92       	push	r9
     c30:	af 92       	push	r10
     c32:	bf 92       	push	r11
     c34:	cf 92       	push	r12
     c36:	df 92       	push	r13
     c38:	ef 92       	push	r14
     c3a:	ff 92       	push	r15
     c3c:	0f 93       	push	r16
     c3e:	1f 93       	push	r17
     c40:	cf 93       	push	r28
     c42:	df 93       	push	r29
     c44:	00 d0       	rcall	.+0      	; 0xc46 <xQueueGenericReceive+0x18>
     c46:	00 d0       	rcall	.+0      	; 0xc48 <xQueueGenericReceive+0x1a>
     c48:	1f 92       	push	r1
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
     c4e:	8c 01       	movw	r16, r24
     c50:	6b 01       	movw	r12, r22
     c52:	5d 83       	std	Y+5, r21	; 0x05
     c54:	4c 83       	std	Y+4, r20	; 0x04
     c56:	92 2e       	mov	r9, r18
     c58:	b1 2c       	mov	r11, r1
     c5a:	aa 24       	eor	r10, r10
     c5c:	a3 94       	inc	r10
     c5e:	7c 01       	movw	r14, r24
     c60:	81 e1       	ldi	r24, 0x11	; 17
     c62:	e8 0e       	add	r14, r24
     c64:	f1 1c       	adc	r15, r1
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	f8 94       	cli
     c6a:	0f 92       	push	r0
     c6c:	f8 01       	movw	r30, r16
     c6e:	82 8d       	ldd	r24, Z+26	; 0x1a
     c70:	88 23       	and	r24, r24
     c72:	49 f1       	breq	.+82     	; 0xcc6 <xQueueGenericReceive+0x98>
     c74:	e6 80       	ldd	r14, Z+6	; 0x06
     c76:	f7 80       	ldd	r15, Z+7	; 0x07
     c78:	b6 01       	movw	r22, r12
     c7a:	c8 01       	movw	r24, r16
     c7c:	0e 94 40 04 	call	0x880	; 0x880 <prvCopyDataFromQueue>
     c80:	91 10       	cpse	r9, r1
     c82:	10 c0       	rjmp	.+32     	; 0xca4 <xQueueGenericReceive+0x76>
     c84:	f8 01       	movw	r30, r16
     c86:	82 8d       	ldd	r24, Z+26	; 0x1a
     c88:	81 50       	subi	r24, 0x01	; 1
     c8a:	82 8f       	std	Z+26, r24	; 0x1a
     c8c:	80 85       	ldd	r24, Z+8	; 0x08
     c8e:	88 23       	and	r24, r24
     c90:	b1 f0       	breq	.+44     	; 0xcbe <xQueueGenericReceive+0x90>
     c92:	c8 01       	movw	r24, r16
     c94:	08 96       	adiw	r24, 0x08	; 8
     c96:	0e 94 df 0a 	call	0x15be	; 0x15be <xTaskRemoveFromEventList>
     c9a:	81 30       	cpi	r24, 0x01	; 1
     c9c:	81 f4       	brne	.+32     	; 0xcbe <xQueueGenericReceive+0x90>
     c9e:	0e 94 2d 02 	call	0x45a	; 0x45a <vPortYield>
     ca2:	0d c0       	rjmp	.+26     	; 0xcbe <xQueueGenericReceive+0x90>
     ca4:	f8 01       	movw	r30, r16
     ca6:	f7 82       	std	Z+7, r15	; 0x07
     ca8:	e6 82       	std	Z+6, r14	; 0x06
     caa:	81 89       	ldd	r24, Z+17	; 0x11
     cac:	88 23       	and	r24, r24
     cae:	39 f0       	breq	.+14     	; 0xcbe <xQueueGenericReceive+0x90>
     cb0:	c8 01       	movw	r24, r16
     cb2:	41 96       	adiw	r24, 0x11	; 17
     cb4:	0e 94 df 0a 	call	0x15be	; 0x15be <xTaskRemoveFromEventList>
     cb8:	81 11       	cpse	r24, r1
     cba:	0e 94 2d 02 	call	0x45a	; 0x45a <vPortYield>
     cbe:	0f 90       	pop	r0
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	4f c0       	rjmp	.+158    	; 0xd64 <xQueueGenericReceive+0x136>
     cc6:	8c 81       	ldd	r24, Y+4	; 0x04
     cc8:	9d 81       	ldd	r25, Y+5	; 0x05
     cca:	89 2b       	or	r24, r25
     ccc:	21 f4       	brne	.+8      	; 0xcd6 <xQueueGenericReceive+0xa8>
     cce:	0f 90       	pop	r0
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	47 c0       	rjmp	.+142    	; 0xd64 <xQueueGenericReceive+0x136>
     cd6:	b1 10       	cpse	r11, r1
     cd8:	05 c0       	rjmp	.+10     	; 0xce4 <xQueueGenericReceive+0xb6>
     cda:	ce 01       	movw	r24, r28
     cdc:	01 96       	adiw	r24, 0x01	; 1
     cde:	0e 94 27 0b 	call	0x164e	; 0x164e <vTaskSetTimeOutState>
     ce2:	ba 2c       	mov	r11, r10
     ce4:	0f 90       	pop	r0
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	0e 94 9d 08 	call	0x113a	; 0x113a <vTaskSuspendAll>
     cec:	0f b6       	in	r0, 0x3f	; 63
     cee:	f8 94       	cli
     cf0:	0f 92       	push	r0
     cf2:	f8 01       	movw	r30, r16
     cf4:	85 8d       	ldd	r24, Z+29	; 0x1d
     cf6:	8f 3f       	cpi	r24, 0xFF	; 255
     cf8:	09 f4       	brne	.+2      	; 0xcfc <xQueueGenericReceive+0xce>
     cfa:	15 8e       	std	Z+29, r1	; 0x1d
     cfc:	f8 01       	movw	r30, r16
     cfe:	86 8d       	ldd	r24, Z+30	; 0x1e
     d00:	8f 3f       	cpi	r24, 0xFF	; 255
     d02:	09 f4       	brne	.+2      	; 0xd06 <xQueueGenericReceive+0xd8>
     d04:	16 8e       	std	Z+30, r1	; 0x1e
     d06:	0f 90       	pop	r0
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	be 01       	movw	r22, r28
     d0c:	6c 5f       	subi	r22, 0xFC	; 252
     d0e:	7f 4f       	sbci	r23, 0xFF	; 255
     d10:	ce 01       	movw	r24, r28
     d12:	01 96       	adiw	r24, 0x01	; 1
     d14:	0e 94 32 0b 	call	0x1664	; 0x1664 <xTaskCheckForTimeOut>
     d18:	81 11       	cpse	r24, r1
     d1a:	1e c0       	rjmp	.+60     	; 0xd58 <xQueueGenericReceive+0x12a>
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	0f 92       	push	r0
     d22:	f8 01       	movw	r30, r16
     d24:	82 8d       	ldd	r24, Z+26	; 0x1a
     d26:	0f 90       	pop	r0
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	81 11       	cpse	r24, r1
     d2c:	0f c0       	rjmp	.+30     	; 0xd4c <xQueueGenericReceive+0x11e>
     d2e:	6c 81       	ldd	r22, Y+4	; 0x04
     d30:	7d 81       	ldd	r23, Y+5	; 0x05
     d32:	c7 01       	movw	r24, r14
     d34:	0e 94 96 0a 	call	0x152c	; 0x152c <vTaskPlaceOnEventList>
     d38:	c8 01       	movw	r24, r16
     d3a:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <prvUnlockQueue>
     d3e:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <xTaskResumeAll>
     d42:	81 11       	cpse	r24, r1
     d44:	90 cf       	rjmp	.-224    	; 0xc66 <xQueueGenericReceive+0x38>
     d46:	0e 94 2d 02 	call	0x45a	; 0x45a <vPortYield>
     d4a:	8d cf       	rjmp	.-230    	; 0xc66 <xQueueGenericReceive+0x38>
     d4c:	c8 01       	movw	r24, r16
     d4e:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <prvUnlockQueue>
     d52:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <xTaskResumeAll>
     d56:	87 cf       	rjmp	.-242    	; 0xc66 <xQueueGenericReceive+0x38>
     d58:	c8 01       	movw	r24, r16
     d5a:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <prvUnlockQueue>
     d5e:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <xTaskResumeAll>
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	df 91       	pop	r29
     d70:	cf 91       	pop	r28
     d72:	1f 91       	pop	r17
     d74:	0f 91       	pop	r16
     d76:	ff 90       	pop	r15
     d78:	ef 90       	pop	r14
     d7a:	df 90       	pop	r13
     d7c:	cf 90       	pop	r12
     d7e:	bf 90       	pop	r11
     d80:	af 90       	pop	r10
     d82:	9f 90       	pop	r9
     d84:	08 95       	ret

00000d86 <vQueueAddToRegistry>:
     d86:	20 91 d7 07 	lds	r18, 0x07D7	; 0x8007d7 <xQueueRegistry>
     d8a:	30 91 d8 07 	lds	r19, 0x07D8	; 0x8007d8 <xQueueRegistry+0x1>
     d8e:	23 2b       	or	r18, r19
     d90:	51 f0       	breq	.+20     	; 0xda6 <vQueueAddToRegistry+0x20>
     d92:	eb ed       	ldi	r30, 0xDB	; 219
     d94:	f7 e0       	ldi	r31, 0x07	; 7
     d96:	21 e0       	ldi	r18, 0x01	; 1
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	d9 01       	movw	r26, r18
     d9c:	40 81       	ld	r20, Z
     d9e:	51 81       	ldd	r21, Z+1	; 0x01
     da0:	45 2b       	or	r20, r21
     da2:	89 f4       	brne	.+34     	; 0xdc6 <vQueueAddToRegistry+0x40>
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <vQueueAddToRegistry+0x24>
     da6:	a0 e0       	ldi	r26, 0x00	; 0
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	aa 0f       	add	r26, r26
     dac:	bb 1f       	adc	r27, r27
     dae:	aa 0f       	add	r26, r26
     db0:	bb 1f       	adc	r27, r27
     db2:	a9 52       	subi	r26, 0x29	; 41
     db4:	b8 4f       	sbci	r27, 0xF8	; 248
     db6:	11 96       	adiw	r26, 0x01	; 1
     db8:	7c 93       	st	X, r23
     dba:	6e 93       	st	-X, r22
     dbc:	13 96       	adiw	r26, 0x03	; 3
     dbe:	9c 93       	st	X, r25
     dc0:	8e 93       	st	-X, r24
     dc2:	12 97       	sbiw	r26, 0x02	; 2
     dc4:	08 95       	ret
     dc6:	2f 5f       	subi	r18, 0xFF	; 255
     dc8:	3f 4f       	sbci	r19, 0xFF	; 255
     dca:	34 96       	adiw	r30, 0x04	; 4
     dcc:	2a 30       	cpi	r18, 0x0A	; 10
     dce:	31 05       	cpc	r19, r1
     dd0:	21 f7       	brne	.-56     	; 0xd9a <vQueueAddToRegistry+0x14>
     dd2:	08 95       	ret

00000dd4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	0f 92       	push	r0
     de0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     de2:	8f 3f       	cpi	r24, 0xFF	; 255
     de4:	09 f4       	brne	.+2      	; 0xde8 <vQueueWaitForMessageRestricted+0x14>
     de6:	1d 8e       	std	Y+29, r1	; 0x1d
     de8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dea:	8f 3f       	cpi	r24, 0xFF	; 255
     dec:	09 f4       	brne	.+2      	; 0xdf0 <vQueueWaitForMessageRestricted+0x1c>
     dee:	1e 8e       	std	Y+30, r1	; 0x1e
     df0:	0f 90       	pop	r0
     df2:	0f be       	out	0x3f, r0	; 63
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     df4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     df6:	81 11       	cpse	r24, r1
     df8:	04 c0       	rjmp	.+8      	; 0xe02 <vQueueWaitForMessageRestricted+0x2e>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     dfa:	ce 01       	movw	r24, r28
     dfc:	41 96       	adiw	r24, 0x11	; 17
     dfe:	0e 94 c2 0a 	call	0x1584	; 0x1584 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
     e02:	ce 01       	movw	r24, r28
     e04:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <prvUnlockQueue>
	}
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	08 95       	ret

00000e0e <prvResetNextTaskUnblockTime>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
     e0e:	e0 91 7d 07 	lds	r30, 0x077D	; 0x80077d <pxDelayedTaskList>
     e12:	f0 91 7e 07 	lds	r31, 0x077E	; 0x80077e <pxDelayedTaskList+0x1>
     e16:	80 81       	ld	r24, Z
     e18:	81 11       	cpse	r24, r1
     e1a:	07 c0       	rjmp	.+14     	; 0xe2a <prvResetNextTaskUnblockTime+0x1c>
     e1c:	8f ef       	ldi	r24, 0xFF	; 255
     e1e:	9f ef       	ldi	r25, 0xFF	; 255
     e20:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <xNextTaskUnblockTime+0x1>
     e24:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <xNextTaskUnblockTime>
     e28:	08 95       	ret
     e2a:	e0 91 7d 07 	lds	r30, 0x077D	; 0x80077d <pxDelayedTaskList>
     e2e:	f0 91 7e 07 	lds	r31, 0x077E	; 0x80077e <pxDelayedTaskList+0x1>
     e32:	05 80       	ldd	r0, Z+5	; 0x05
     e34:	f6 81       	ldd	r31, Z+6	; 0x06
     e36:	e0 2d       	mov	r30, r0
     e38:	06 80       	ldd	r0, Z+6	; 0x06
     e3a:	f7 81       	ldd	r31, Z+7	; 0x07
     e3c:	e0 2d       	mov	r30, r0
     e3e:	82 81       	ldd	r24, Z+2	; 0x02
     e40:	93 81       	ldd	r25, Z+3	; 0x03
     e42:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <xNextTaskUnblockTime+0x1>
     e46:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <xNextTaskUnblockTime>
     e4a:	08 95       	ret

00000e4c <prvAddCurrentTaskToDelayedList>:
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	ec 01       	movw	r28, r24
     e52:	e0 91 b5 07 	lds	r30, 0x07B5	; 0x8007b5 <pxCurrentTCB>
     e56:	f0 91 b6 07 	lds	r31, 0x07B6	; 0x8007b6 <pxCurrentTCB+0x1>
     e5a:	93 83       	std	Z+3, r25	; 0x03
     e5c:	82 83       	std	Z+2, r24	; 0x02
     e5e:	80 91 5c 07 	lds	r24, 0x075C	; 0x80075c <xTickCount>
     e62:	90 91 5d 07 	lds	r25, 0x075D	; 0x80075d <xTickCount+0x1>
     e66:	c8 17       	cp	r28, r24
     e68:	d9 07       	cpc	r29, r25
     e6a:	68 f4       	brcc	.+26     	; 0xe86 <prvAddCurrentTaskToDelayedList+0x3a>
     e6c:	60 91 b5 07 	lds	r22, 0x07B5	; 0x8007b5 <pxCurrentTCB>
     e70:	70 91 b6 07 	lds	r23, 0x07B6	; 0x8007b6 <pxCurrentTCB+0x1>
     e74:	80 91 7b 07 	lds	r24, 0x077B	; 0x80077b <pxOverflowDelayedTaskList>
     e78:	90 91 7c 07 	lds	r25, 0x077C	; 0x80077c <pxOverflowDelayedTaskList+0x1>
     e7c:	6e 5f       	subi	r22, 0xFE	; 254
     e7e:	7f 4f       	sbci	r23, 0xFF	; 255
     e80:	0e 94 30 01 	call	0x260	; 0x260 <vListInsert>
     e84:	17 c0       	rjmp	.+46     	; 0xeb4 <prvAddCurrentTaskToDelayedList+0x68>
     e86:	60 91 b5 07 	lds	r22, 0x07B5	; 0x8007b5 <pxCurrentTCB>
     e8a:	70 91 b6 07 	lds	r23, 0x07B6	; 0x8007b6 <pxCurrentTCB+0x1>
     e8e:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <pxDelayedTaskList>
     e92:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <pxDelayedTaskList+0x1>
     e96:	6e 5f       	subi	r22, 0xFE	; 254
     e98:	7f 4f       	sbci	r23, 0xFF	; 255
     e9a:	0e 94 30 01 	call	0x260	; 0x260 <vListInsert>
     e9e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <xNextTaskUnblockTime>
     ea2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <xNextTaskUnblockTime+0x1>
     ea6:	c8 17       	cp	r28, r24
     ea8:	d9 07       	cpc	r29, r25
     eaa:	20 f4       	brcc	.+8      	; 0xeb4 <prvAddCurrentTaskToDelayedList+0x68>
     eac:	d0 93 03 01 	sts	0x0103, r29	; 0x800103 <xNextTaskUnblockTime+0x1>
     eb0:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <xNextTaskUnblockTime>
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	08 95       	ret

00000eba <xTaskGenericCreate>:
     eba:	4f 92       	push	r4
     ebc:	5f 92       	push	r5
     ebe:	6f 92       	push	r6
     ec0:	7f 92       	push	r7
     ec2:	8f 92       	push	r8
     ec4:	9f 92       	push	r9
     ec6:	af 92       	push	r10
     ec8:	bf 92       	push	r11
     eca:	cf 92       	push	r12
     ecc:	df 92       	push	r13
     ece:	ef 92       	push	r14
     ed0:	ff 92       	push	r15
     ed2:	0f 93       	push	r16
     ed4:	1f 93       	push	r17
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	4c 01       	movw	r8, r24
     edc:	eb 01       	movw	r28, r22
     ede:	5a 01       	movw	r10, r20
     ee0:	29 01       	movw	r4, r18
     ee2:	c1 14       	cp	r12, r1
     ee4:	d1 04       	cpc	r13, r1
     ee6:	39 f4       	brne	.+14     	; 0xef6 <xTaskGenericCreate+0x3c>
     ee8:	ca 01       	movw	r24, r20
     eea:	0e 94 ef 02 	call	0x5de	; 0x5de <pvPortMalloc>
     eee:	6c 01       	movw	r12, r24
     ef0:	89 2b       	or	r24, r25
     ef2:	09 f4       	brne	.+2      	; 0xef6 <xTaskGenericCreate+0x3c>
     ef4:	e1 c0       	rjmp	.+450    	; 0x10b8 <xTaskGenericCreate+0x1fe>
     ef6:	86 e2       	ldi	r24, 0x26	; 38
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	0e 94 ef 02 	call	0x5de	; 0x5de <pvPortMalloc>
     efe:	3c 01       	movw	r6, r24
     f00:	00 97       	sbiw	r24, 0x00	; 0
     f02:	79 f0       	breq	.+30     	; 0xf22 <xTaskGenericCreate+0x68>
     f04:	fc 01       	movw	r30, r24
     f06:	d0 8e       	std	Z+24, r13	; 0x18
     f08:	c7 8a       	std	Z+23, r12	; 0x17
     f0a:	f1 e0       	ldi	r31, 0x01	; 1
     f0c:	af 1a       	sub	r10, r31
     f0e:	b1 08       	sbc	r11, r1
     f10:	ca 0c       	add	r12, r10
     f12:	db 1c       	adc	r13, r11
     f14:	88 81       	ld	r24, Y
     f16:	f3 01       	movw	r30, r6
     f18:	81 8f       	std	Z+25, r24	; 0x19
     f1a:	88 81       	ld	r24, Y
     f1c:	81 11       	cpse	r24, r1
     f1e:	05 c0       	rjmp	.+10     	; 0xf2a <xTaskGenericCreate+0x70>
     f20:	14 c0       	rjmp	.+40     	; 0xf4a <xTaskGenericCreate+0x90>
     f22:	c6 01       	movw	r24, r12
     f24:	0e 94 89 03 	call	0x712	; 0x712 <vPortFree>
     f28:	c7 c0       	rjmp	.+398    	; 0x10b8 <xTaskGenericCreate+0x1fe>
     f2a:	d3 01       	movw	r26, r6
     f2c:	5a 96       	adiw	r26, 0x1a	; 26
     f2e:	fe 01       	movw	r30, r28
     f30:	31 96       	adiw	r30, 0x01	; 1
     f32:	9e 01       	movw	r18, r28
     f34:	28 5f       	subi	r18, 0xF8	; 248
     f36:	3f 4f       	sbci	r19, 0xFF	; 255
     f38:	ef 01       	movw	r28, r30
     f3a:	81 91       	ld	r24, Z+
     f3c:	8d 93       	st	X+, r24
     f3e:	88 81       	ld	r24, Y
     f40:	88 23       	and	r24, r24
     f42:	19 f0       	breq	.+6      	; 0xf4a <xTaskGenericCreate+0x90>
     f44:	e2 17       	cp	r30, r18
     f46:	f3 07       	cpc	r31, r19
     f48:	b9 f7       	brne	.-18     	; 0xf38 <xTaskGenericCreate+0x7e>
     f4a:	f3 01       	movw	r30, r6
     f4c:	10 a2       	std	Z+32, r1	; 0x20
     f4e:	10 2f       	mov	r17, r16
     f50:	04 30       	cpi	r16, 0x04	; 4
     f52:	08 f0       	brcs	.+2      	; 0xf56 <xTaskGenericCreate+0x9c>
     f54:	13 e0       	ldi	r17, 0x03	; 3
     f56:	f3 01       	movw	r30, r6
     f58:	16 8b       	std	Z+22, r17	; 0x16
     f5a:	e3 01       	movw	r28, r6
     f5c:	22 96       	adiw	r28, 0x02	; 2
     f5e:	ce 01       	movw	r24, r28
     f60:	0e 94 0b 01 	call	0x216	; 0x216 <vListInitialiseItem>
     f64:	c3 01       	movw	r24, r6
     f66:	0c 96       	adiw	r24, 0x0c	; 12
     f68:	0e 94 0b 01 	call	0x216	; 0x216 <vListInitialiseItem>
     f6c:	f3 01       	movw	r30, r6
     f6e:	71 86       	std	Z+9, r7	; 0x09
     f70:	60 86       	std	Z+8, r6	; 0x08
     f72:	84 e0       	ldi	r24, 0x04	; 4
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	81 1b       	sub	r24, r17
     f78:	91 09       	sbc	r25, r1
     f7a:	95 87       	std	Z+13, r25	; 0x0d
     f7c:	84 87       	std	Z+12, r24	; 0x0c
     f7e:	73 8a       	std	Z+19, r7	; 0x13
     f80:	62 8a       	std	Z+18, r6	; 0x12
     f82:	11 a2       	std	Z+33, r1	; 0x21
     f84:	12 a2       	std	Z+34, r1	; 0x22
     f86:	13 a2       	std	Z+35, r1	; 0x23
     f88:	14 a2       	std	Z+36, r1	; 0x24
     f8a:	15 a2       	std	Z+37, r1	; 0x25
     f8c:	a2 01       	movw	r20, r4
     f8e:	b4 01       	movw	r22, r8
     f90:	c6 01       	movw	r24, r12
     f92:	0e 94 87 01 	call	0x30e	; 0x30e <pxPortInitialiseStack>
     f96:	f3 01       	movw	r30, r6
     f98:	91 83       	std	Z+1, r25	; 0x01
     f9a:	80 83       	st	Z, r24
     f9c:	e1 14       	cp	r14, r1
     f9e:	f1 04       	cpc	r15, r1
     fa0:	19 f0       	breq	.+6      	; 0xfa8 <xTaskGenericCreate+0xee>
     fa2:	f7 01       	movw	r30, r14
     fa4:	71 82       	std	Z+1, r7	; 0x01
     fa6:	60 82       	st	Z, r6
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	f8 94       	cli
     fac:	0f 92       	push	r0
     fae:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <uxCurrentNumberOfTasks>
     fb2:	8f 5f       	subi	r24, 0xFF	; 255
     fb4:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <uxCurrentNumberOfTasks>
     fb8:	80 91 b5 07 	lds	r24, 0x07B5	; 0x8007b5 <pxCurrentTCB>
     fbc:	90 91 b6 07 	lds	r25, 0x07B6	; 0x8007b6 <pxCurrentTCB+0x1>
     fc0:	89 2b       	or	r24, r25
     fc2:	d1 f5       	brne	.+116    	; 0x1038 <xTaskGenericCreate+0x17e>
     fc4:	70 92 b6 07 	sts	0x07B6, r7	; 0x8007b6 <pxCurrentTCB+0x1>
     fc8:	60 92 b5 07 	sts	0x07B5, r6	; 0x8007b5 <pxCurrentTCB>
     fcc:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <uxCurrentNumberOfTasks>
     fd0:	81 30       	cpi	r24, 0x01	; 1
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <xTaskGenericCreate+0x11c>
     fd4:	40 c0       	rjmp	.+128    	; 0x1056 <xTaskGenericCreate+0x19c>
     fd6:	81 e9       	ldi	r24, 0x91	; 145
     fd8:	97 e0       	ldi	r25, 0x07	; 7
     fda:	0e 94 fd 00 	call	0x1fa	; 0x1fa <vListInitialise>
     fde:	8a e9       	ldi	r24, 0x9A	; 154
     fe0:	97 e0       	ldi	r25, 0x07	; 7
     fe2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <vListInitialise>
     fe6:	83 ea       	ldi	r24, 0xA3	; 163
     fe8:	97 e0       	ldi	r25, 0x07	; 7
     fea:	0e 94 fd 00 	call	0x1fa	; 0x1fa <vListInitialise>
     fee:	8c ea       	ldi	r24, 0xAC	; 172
     ff0:	97 e0       	ldi	r25, 0x07	; 7
     ff2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <vListInitialise>
     ff6:	88 e8       	ldi	r24, 0x88	; 136
     ff8:	97 e0       	ldi	r25, 0x07	; 7
     ffa:	0e 94 fd 00 	call	0x1fa	; 0x1fa <vListInitialise>
     ffe:	8f e7       	ldi	r24, 0x7F	; 127
    1000:	97 e0       	ldi	r25, 0x07	; 7
    1002:	0e 94 fd 00 	call	0x1fa	; 0x1fa <vListInitialise>
    1006:	82 e7       	ldi	r24, 0x72	; 114
    1008:	97 e0       	ldi	r25, 0x07	; 7
    100a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <vListInitialise>
    100e:	89 e6       	ldi	r24, 0x69	; 105
    1010:	97 e0       	ldi	r25, 0x07	; 7
    1012:	0e 94 fd 00 	call	0x1fa	; 0x1fa <vListInitialise>
    1016:	8f e5       	ldi	r24, 0x5F	; 95
    1018:	97 e0       	ldi	r25, 0x07	; 7
    101a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <vListInitialise>
    101e:	88 e8       	ldi	r24, 0x88	; 136
    1020:	97 e0       	ldi	r25, 0x07	; 7
    1022:	90 93 7e 07 	sts	0x077E, r25	; 0x80077e <pxDelayedTaskList+0x1>
    1026:	80 93 7d 07 	sts	0x077D, r24	; 0x80077d <pxDelayedTaskList>
    102a:	8f e7       	ldi	r24, 0x7F	; 127
    102c:	97 e0       	ldi	r25, 0x07	; 7
    102e:	90 93 7c 07 	sts	0x077C, r25	; 0x80077c <pxOverflowDelayedTaskList+0x1>
    1032:	80 93 7b 07 	sts	0x077B, r24	; 0x80077b <pxOverflowDelayedTaskList>
    1036:	0f c0       	rjmp	.+30     	; 0x1056 <xTaskGenericCreate+0x19c>
    1038:	80 91 5a 07 	lds	r24, 0x075A	; 0x80075a <xSchedulerRunning>
    103c:	81 11       	cpse	r24, r1
    103e:	0b c0       	rjmp	.+22     	; 0x1056 <xTaskGenericCreate+0x19c>
    1040:	e0 91 b5 07 	lds	r30, 0x07B5	; 0x8007b5 <pxCurrentTCB>
    1044:	f0 91 b6 07 	lds	r31, 0x07B6	; 0x8007b6 <pxCurrentTCB+0x1>
    1048:	86 89       	ldd	r24, Z+22	; 0x16
    104a:	08 17       	cp	r16, r24
    104c:	20 f0       	brcs	.+8      	; 0x1056 <xTaskGenericCreate+0x19c>
    104e:	70 92 b6 07 	sts	0x07B6, r7	; 0x8007b6 <pxCurrentTCB+0x1>
    1052:	60 92 b5 07 	sts	0x07B5, r6	; 0x8007b5 <pxCurrentTCB>
    1056:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <uxTaskNumber>
    105a:	8f 5f       	subi	r24, 0xFF	; 255
    105c:	80 93 56 07 	sts	0x0756, r24	; 0x800756 <uxTaskNumber>
    1060:	f3 01       	movw	r30, r6
    1062:	86 89       	ldd	r24, Z+22	; 0x16
    1064:	90 91 5b 07 	lds	r25, 0x075B	; 0x80075b <uxTopReadyPriority>
    1068:	98 17       	cp	r25, r24
    106a:	10 f4       	brcc	.+4      	; 0x1070 <xTaskGenericCreate+0x1b6>
    106c:	80 93 5b 07 	sts	0x075B, r24	; 0x80075b <uxTopReadyPriority>
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	9c 01       	movw	r18, r24
    1074:	22 0f       	add	r18, r18
    1076:	33 1f       	adc	r19, r19
    1078:	22 0f       	add	r18, r18
    107a:	33 1f       	adc	r19, r19
    107c:	22 0f       	add	r18, r18
    107e:	33 1f       	adc	r19, r19
    1080:	82 0f       	add	r24, r18
    1082:	93 1f       	adc	r25, r19
    1084:	be 01       	movw	r22, r28
    1086:	8f 56       	subi	r24, 0x6F	; 111
    1088:	98 4f       	sbci	r25, 0xF8	; 248
    108a:	0e 94 0f 01 	call	0x21e	; 0x21e <vListInsertEnd>
    108e:	0f 90       	pop	r0
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	80 91 5a 07 	lds	r24, 0x075A	; 0x80075a <xSchedulerRunning>
    1096:	88 23       	and	r24, r24
    1098:	59 f0       	breq	.+22     	; 0x10b0 <xTaskGenericCreate+0x1f6>
    109a:	e0 91 b5 07 	lds	r30, 0x07B5	; 0x8007b5 <pxCurrentTCB>
    109e:	f0 91 b6 07 	lds	r31, 0x07B6	; 0x8007b6 <pxCurrentTCB+0x1>
    10a2:	86 89       	ldd	r24, Z+22	; 0x16
    10a4:	80 17       	cp	r24, r16
    10a6:	30 f4       	brcc	.+12     	; 0x10b4 <xTaskGenericCreate+0x1fa>
    10a8:	0e 94 2d 02 	call	0x45a	; 0x45a <vPortYield>
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	05 c0       	rjmp	.+10     	; 0x10ba <xTaskGenericCreate+0x200>
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	03 c0       	rjmp	.+6      	; 0x10ba <xTaskGenericCreate+0x200>
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	01 c0       	rjmp	.+2      	; 0x10ba <xTaskGenericCreate+0x200>
    10b8:	8f ef       	ldi	r24, 0xFF	; 255
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	1f 91       	pop	r17
    10c0:	0f 91       	pop	r16
    10c2:	ff 90       	pop	r15
    10c4:	ef 90       	pop	r14
    10c6:	df 90       	pop	r13
    10c8:	cf 90       	pop	r12
    10ca:	bf 90       	pop	r11
    10cc:	af 90       	pop	r10
    10ce:	9f 90       	pop	r9
    10d0:	8f 90       	pop	r8
    10d2:	7f 90       	pop	r7
    10d4:	6f 90       	pop	r6
    10d6:	5f 90       	pop	r5
    10d8:	4f 90       	pop	r4
    10da:	08 95       	ret

000010dc <vTaskStartScheduler>:
    10dc:	af 92       	push	r10
    10de:	bf 92       	push	r11
    10e0:	cf 92       	push	r12
    10e2:	df 92       	push	r13
    10e4:	ef 92       	push	r14
    10e6:	ff 92       	push	r15
    10e8:	0f 93       	push	r16
    10ea:	a1 2c       	mov	r10, r1
    10ec:	b1 2c       	mov	r11, r1
    10ee:	c1 2c       	mov	r12, r1
    10f0:	d1 2c       	mov	r13, r1
    10f2:	e1 2c       	mov	r14, r1
    10f4:	f1 2c       	mov	r15, r1
    10f6:	00 e0       	ldi	r16, 0x00	; 0
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	45 e5       	ldi	r20, 0x55	; 85
    10fe:	50 e0       	ldi	r21, 0x00	; 0
    1100:	6e e5       	ldi	r22, 0x5E	; 94
    1102:	71 e0       	ldi	r23, 0x01	; 1
    1104:	8c ee       	ldi	r24, 0xEC	; 236
    1106:	99 e0       	ldi	r25, 0x09	; 9
    1108:	0e 94 5d 07 	call	0xeba	; 0xeba <xTaskGenericCreate>
    110c:	81 30       	cpi	r24, 0x01	; 1
    110e:	69 f4       	brne	.+26     	; 0x112a <vTaskStartScheduler+0x4e>
    1110:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <xTimerCreateTimerTask>
    1114:	81 30       	cpi	r24, 0x01	; 1
    1116:	49 f4       	brne	.+18     	; 0x112a <vTaskStartScheduler+0x4e>
    1118:	f8 94       	cli
    111a:	80 93 5a 07 	sts	0x075A, r24	; 0x80075a <xSchedulerRunning>
    111e:	10 92 5d 07 	sts	0x075D, r1	; 0x80075d <xTickCount+0x1>
    1122:	10 92 5c 07 	sts	0x075C, r1	; 0x80075c <xTickCount>
    1126:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <xPortStartScheduler>
    112a:	0f 91       	pop	r16
    112c:	ff 90       	pop	r15
    112e:	ef 90       	pop	r14
    1130:	df 90       	pop	r13
    1132:	cf 90       	pop	r12
    1134:	bf 90       	pop	r11
    1136:	af 90       	pop	r10
    1138:	08 95       	ret

0000113a <vTaskSuspendAll>:
    113a:	80 91 55 07 	lds	r24, 0x0755	; 0x800755 <uxSchedulerSuspended>
    113e:	8f 5f       	subi	r24, 0xFF	; 255
    1140:	80 93 55 07 	sts	0x0755, r24	; 0x800755 <uxSchedulerSuspended>
    1144:	08 95       	ret

00001146 <xTaskGetTickCount>:
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	f8 94       	cli
    114a:	0f 92       	push	r0
    114c:	80 91 5c 07 	lds	r24, 0x075C	; 0x80075c <xTickCount>
    1150:	90 91 5d 07 	lds	r25, 0x075D	; 0x80075d <xTickCount+0x1>
    1154:	0f 90       	pop	r0
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	08 95       	ret

0000115a <xTaskIncrementTick>:
    115a:	cf 92       	push	r12
    115c:	df 92       	push	r13
    115e:	ef 92       	push	r14
    1160:	ff 92       	push	r15
    1162:	0f 93       	push	r16
    1164:	1f 93       	push	r17
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
    116a:	80 91 55 07 	lds	r24, 0x0755	; 0x800755 <uxSchedulerSuspended>
    116e:	81 11       	cpse	r24, r1
    1170:	9b c0       	rjmp	.+310    	; 0x12a8 <xTaskIncrementTick+0x14e>
    1172:	80 91 5c 07 	lds	r24, 0x075C	; 0x80075c <xTickCount>
    1176:	90 91 5d 07 	lds	r25, 0x075D	; 0x80075d <xTickCount+0x1>
    117a:	01 96       	adiw	r24, 0x01	; 1
    117c:	90 93 5d 07 	sts	0x075D, r25	; 0x80075d <xTickCount+0x1>
    1180:	80 93 5c 07 	sts	0x075C, r24	; 0x80075c <xTickCount>
    1184:	e0 90 5c 07 	lds	r14, 0x075C	; 0x80075c <xTickCount>
    1188:	f0 90 5d 07 	lds	r15, 0x075D	; 0x80075d <xTickCount+0x1>
    118c:	e1 14       	cp	r14, r1
    118e:	f1 04       	cpc	r15, r1
    1190:	b9 f4       	brne	.+46     	; 0x11c0 <xTaskIncrementTick+0x66>
    1192:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <pxDelayedTaskList>
    1196:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <pxDelayedTaskList+0x1>
    119a:	20 91 7b 07 	lds	r18, 0x077B	; 0x80077b <pxOverflowDelayedTaskList>
    119e:	30 91 7c 07 	lds	r19, 0x077C	; 0x80077c <pxOverflowDelayedTaskList+0x1>
    11a2:	30 93 7e 07 	sts	0x077E, r19	; 0x80077e <pxDelayedTaskList+0x1>
    11a6:	20 93 7d 07 	sts	0x077D, r18	; 0x80077d <pxDelayedTaskList>
    11aa:	90 93 7c 07 	sts	0x077C, r25	; 0x80077c <pxOverflowDelayedTaskList+0x1>
    11ae:	80 93 7b 07 	sts	0x077B, r24	; 0x80077b <pxOverflowDelayedTaskList>
    11b2:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <xNumOfOverflows>
    11b6:	8f 5f       	subi	r24, 0xFF	; 255
    11b8:	80 93 57 07 	sts	0x0757, r24	; 0x800757 <xNumOfOverflows>
    11bc:	0e 94 07 07 	call	0xe0e	; 0xe0e <prvResetNextTaskUnblockTime>
    11c0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <xNextTaskUnblockTime>
    11c4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <xNextTaskUnblockTime+0x1>
    11c8:	e8 16       	cp	r14, r24
    11ca:	f9 06       	cpc	r15, r25
    11cc:	10 f4       	brcc	.+4      	; 0x11d2 <xTaskIncrementTick+0x78>
    11ce:	d1 2c       	mov	r13, r1
    11d0:	53 c0       	rjmp	.+166    	; 0x1278 <xTaskIncrementTick+0x11e>
    11d2:	d1 2c       	mov	r13, r1
    11d4:	cc 24       	eor	r12, r12
    11d6:	c3 94       	inc	r12
    11d8:	e0 91 7d 07 	lds	r30, 0x077D	; 0x80077d <pxDelayedTaskList>
    11dc:	f0 91 7e 07 	lds	r31, 0x077E	; 0x80077e <pxDelayedTaskList+0x1>
    11e0:	80 81       	ld	r24, Z
    11e2:	81 11       	cpse	r24, r1
    11e4:	07 c0       	rjmp	.+14     	; 0x11f4 <xTaskIncrementTick+0x9a>
    11e6:	8f ef       	ldi	r24, 0xFF	; 255
    11e8:	9f ef       	ldi	r25, 0xFF	; 255
    11ea:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <xNextTaskUnblockTime+0x1>
    11ee:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <xNextTaskUnblockTime>
    11f2:	42 c0       	rjmp	.+132    	; 0x1278 <xTaskIncrementTick+0x11e>
    11f4:	e0 91 7d 07 	lds	r30, 0x077D	; 0x80077d <pxDelayedTaskList>
    11f8:	f0 91 7e 07 	lds	r31, 0x077E	; 0x80077e <pxDelayedTaskList+0x1>
    11fc:	05 80       	ldd	r0, Z+5	; 0x05
    11fe:	f6 81       	ldd	r31, Z+6	; 0x06
    1200:	e0 2d       	mov	r30, r0
    1202:	c6 81       	ldd	r28, Z+6	; 0x06
    1204:	d7 81       	ldd	r29, Z+7	; 0x07
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	9b 81       	ldd	r25, Y+3	; 0x03
    120a:	e8 16       	cp	r14, r24
    120c:	f9 06       	cpc	r15, r25
    120e:	28 f4       	brcc	.+10     	; 0x121a <xTaskIncrementTick+0xc0>
    1210:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <xNextTaskUnblockTime+0x1>
    1214:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <xNextTaskUnblockTime>
    1218:	2f c0       	rjmp	.+94     	; 0x1278 <xTaskIncrementTick+0x11e>
    121a:	8e 01       	movw	r16, r28
    121c:	0e 5f       	subi	r16, 0xFE	; 254
    121e:	1f 4f       	sbci	r17, 0xFF	; 255
    1220:	c8 01       	movw	r24, r16
    1222:	0e 94 61 01 	call	0x2c2	; 0x2c2 <uxListRemove>
    1226:	8c 89       	ldd	r24, Y+20	; 0x14
    1228:	9d 89       	ldd	r25, Y+21	; 0x15
    122a:	89 2b       	or	r24, r25
    122c:	21 f0       	breq	.+8      	; 0x1236 <xTaskIncrementTick+0xdc>
    122e:	ce 01       	movw	r24, r28
    1230:	0c 96       	adiw	r24, 0x0c	; 12
    1232:	0e 94 61 01 	call	0x2c2	; 0x2c2 <uxListRemove>
    1236:	8e 89       	ldd	r24, Y+22	; 0x16
    1238:	90 91 5b 07 	lds	r25, 0x075B	; 0x80075b <uxTopReadyPriority>
    123c:	98 17       	cp	r25, r24
    123e:	10 f4       	brcc	.+4      	; 0x1244 <xTaskIncrementTick+0xea>
    1240:	80 93 5b 07 	sts	0x075B, r24	; 0x80075b <uxTopReadyPriority>
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	9c 01       	movw	r18, r24
    1248:	22 0f       	add	r18, r18
    124a:	33 1f       	adc	r19, r19
    124c:	22 0f       	add	r18, r18
    124e:	33 1f       	adc	r19, r19
    1250:	22 0f       	add	r18, r18
    1252:	33 1f       	adc	r19, r19
    1254:	82 0f       	add	r24, r18
    1256:	93 1f       	adc	r25, r19
    1258:	b8 01       	movw	r22, r16
    125a:	8f 56       	subi	r24, 0x6F	; 111
    125c:	98 4f       	sbci	r25, 0xF8	; 248
    125e:	0e 94 0f 01 	call	0x21e	; 0x21e <vListInsertEnd>
    1262:	e0 91 b5 07 	lds	r30, 0x07B5	; 0x8007b5 <pxCurrentTCB>
    1266:	f0 91 b6 07 	lds	r31, 0x07B6	; 0x8007b6 <pxCurrentTCB+0x1>
    126a:	9e 89       	ldd	r25, Y+22	; 0x16
    126c:	86 89       	ldd	r24, Z+22	; 0x16
    126e:	98 17       	cp	r25, r24
    1270:	08 f4       	brcc	.+2      	; 0x1274 <xTaskIncrementTick+0x11a>
    1272:	b2 cf       	rjmp	.-156    	; 0x11d8 <xTaskIncrementTick+0x7e>
    1274:	dc 2c       	mov	r13, r12
    1276:	b0 cf       	rjmp	.-160    	; 0x11d8 <xTaskIncrementTick+0x7e>
    1278:	e0 91 b5 07 	lds	r30, 0x07B5	; 0x8007b5 <pxCurrentTCB>
    127c:	f0 91 b6 07 	lds	r31, 0x07B6	; 0x8007b6 <pxCurrentTCB+0x1>
    1280:	86 89       	ldd	r24, Z+22	; 0x16
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	fc 01       	movw	r30, r24
    1286:	ee 0f       	add	r30, r30
    1288:	ff 1f       	adc	r31, r31
    128a:	ee 0f       	add	r30, r30
    128c:	ff 1f       	adc	r31, r31
    128e:	ee 0f       	add	r30, r30
    1290:	ff 1f       	adc	r31, r31
    1292:	8e 0f       	add	r24, r30
    1294:	9f 1f       	adc	r25, r31
    1296:	fc 01       	movw	r30, r24
    1298:	ef 56       	subi	r30, 0x6F	; 111
    129a:	f8 4f       	sbci	r31, 0xF8	; 248
    129c:	80 81       	ld	r24, Z
    129e:	82 30       	cpi	r24, 0x02	; 2
    12a0:	48 f0       	brcs	.+18     	; 0x12b4 <xTaskIncrementTick+0x15a>
    12a2:	dd 24       	eor	r13, r13
    12a4:	d3 94       	inc	r13
    12a6:	06 c0       	rjmp	.+12     	; 0x12b4 <xTaskIncrementTick+0x15a>
    12a8:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <uxPendedTicks>
    12ac:	8f 5f       	subi	r24, 0xFF	; 255
    12ae:	80 93 59 07 	sts	0x0759, r24	; 0x800759 <uxPendedTicks>
    12b2:	d1 2c       	mov	r13, r1
    12b4:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <xYieldPending>
    12b8:	88 23       	and	r24, r24
    12ba:	11 f0       	breq	.+4      	; 0x12c0 <xTaskIncrementTick+0x166>
    12bc:	dd 24       	eor	r13, r13
    12be:	d3 94       	inc	r13
    12c0:	8d 2d       	mov	r24, r13
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	1f 91       	pop	r17
    12c8:	0f 91       	pop	r16
    12ca:	ff 90       	pop	r15
    12cc:	ef 90       	pop	r14
    12ce:	df 90       	pop	r13
    12d0:	cf 90       	pop	r12
    12d2:	08 95       	ret

000012d4 <xTaskResumeAll>:
    12d4:	df 92       	push	r13
    12d6:	ef 92       	push	r14
    12d8:	ff 92       	push	r15
    12da:	0f 93       	push	r16
    12dc:	1f 93       	push	r17
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	f8 94       	cli
    12e6:	0f 92       	push	r0
    12e8:	80 91 55 07 	lds	r24, 0x0755	; 0x800755 <uxSchedulerSuspended>
    12ec:	81 50       	subi	r24, 0x01	; 1
    12ee:	80 93 55 07 	sts	0x0755, r24	; 0x800755 <uxSchedulerSuspended>
    12f2:	80 91 55 07 	lds	r24, 0x0755	; 0x800755 <uxSchedulerSuspended>
    12f6:	81 11       	cpse	r24, r1
    12f8:	62 c0       	rjmp	.+196    	; 0x13be <xTaskResumeAll+0xea>
    12fa:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <uxCurrentNumberOfTasks>
    12fe:	81 11       	cpse	r24, r1
    1300:	33 c0       	rjmp	.+102    	; 0x1368 <xTaskResumeAll+0x94>
    1302:	60 c0       	rjmp	.+192    	; 0x13c4 <xTaskResumeAll+0xf0>
    1304:	d7 01       	movw	r26, r14
    1306:	15 96       	adiw	r26, 0x05	; 5
    1308:	ed 91       	ld	r30, X+
    130a:	fc 91       	ld	r31, X
    130c:	16 97       	sbiw	r26, 0x06	; 6
    130e:	c6 81       	ldd	r28, Z+6	; 0x06
    1310:	d7 81       	ldd	r29, Z+7	; 0x07
    1312:	ce 01       	movw	r24, r28
    1314:	0c 96       	adiw	r24, 0x0c	; 12
    1316:	0e 94 61 01 	call	0x2c2	; 0x2c2 <uxListRemove>
    131a:	8e 01       	movw	r16, r28
    131c:	0e 5f       	subi	r16, 0xFE	; 254
    131e:	1f 4f       	sbci	r17, 0xFF	; 255
    1320:	c8 01       	movw	r24, r16
    1322:	0e 94 61 01 	call	0x2c2	; 0x2c2 <uxListRemove>
    1326:	8e 89       	ldd	r24, Y+22	; 0x16
    1328:	90 91 5b 07 	lds	r25, 0x075B	; 0x80075b <uxTopReadyPriority>
    132c:	98 17       	cp	r25, r24
    132e:	10 f4       	brcc	.+4      	; 0x1334 <xTaskResumeAll+0x60>
    1330:	80 93 5b 07 	sts	0x075B, r24	; 0x80075b <uxTopReadyPriority>
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	9c 01       	movw	r18, r24
    1338:	22 0f       	add	r18, r18
    133a:	33 1f       	adc	r19, r19
    133c:	22 0f       	add	r18, r18
    133e:	33 1f       	adc	r19, r19
    1340:	22 0f       	add	r18, r18
    1342:	33 1f       	adc	r19, r19
    1344:	82 0f       	add	r24, r18
    1346:	93 1f       	adc	r25, r19
    1348:	b8 01       	movw	r22, r16
    134a:	8f 56       	subi	r24, 0x6F	; 111
    134c:	98 4f       	sbci	r25, 0xF8	; 248
    134e:	0e 94 0f 01 	call	0x21e	; 0x21e <vListInsertEnd>
    1352:	e0 91 b5 07 	lds	r30, 0x07B5	; 0x8007b5 <pxCurrentTCB>
    1356:	f0 91 b6 07 	lds	r31, 0x07B6	; 0x8007b6 <pxCurrentTCB+0x1>
    135a:	9e 89       	ldd	r25, Y+22	; 0x16
    135c:	86 89       	ldd	r24, Z+22	; 0x16
    135e:	98 17       	cp	r25, r24
    1360:	58 f0       	brcs	.+22     	; 0x1378 <xTaskResumeAll+0xa4>
    1362:	d0 92 58 07 	sts	0x0758, r13	; 0x800758 <xYieldPending>
    1366:	08 c0       	rjmp	.+16     	; 0x1378 <xTaskResumeAll+0xa4>
    1368:	0f 2e       	mov	r0, r31
    136a:	f2 e7       	ldi	r31, 0x72	; 114
    136c:	ef 2e       	mov	r14, r31
    136e:	f7 e0       	ldi	r31, 0x07	; 7
    1370:	ff 2e       	mov	r15, r31
    1372:	f0 2d       	mov	r31, r0
    1374:	dd 24       	eor	r13, r13
    1376:	d3 94       	inc	r13
    1378:	f7 01       	movw	r30, r14
    137a:	80 81       	ld	r24, Z
    137c:	81 11       	cpse	r24, r1
    137e:	c2 cf       	rjmp	.-124    	; 0x1304 <xTaskResumeAll+0x30>
    1380:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <uxPendedTicks>
    1384:	88 23       	and	r24, r24
    1386:	99 f0       	breq	.+38     	; 0x13ae <xTaskResumeAll+0xda>
    1388:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <uxPendedTicks>
    138c:	88 23       	and	r24, r24
    138e:	79 f0       	breq	.+30     	; 0x13ae <xTaskResumeAll+0xda>
    1390:	c1 e0       	ldi	r28, 0x01	; 1
    1392:	0e 94 ad 08 	call	0x115a	; 0x115a <xTaskIncrementTick>
    1396:	81 11       	cpse	r24, r1
    1398:	c0 93 58 07 	sts	0x0758, r28	; 0x800758 <xYieldPending>
    139c:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <uxPendedTicks>
    13a0:	81 50       	subi	r24, 0x01	; 1
    13a2:	80 93 59 07 	sts	0x0759, r24	; 0x800759 <uxPendedTicks>
    13a6:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <uxPendedTicks>
    13aa:	81 11       	cpse	r24, r1
    13ac:	f2 cf       	rjmp	.-28     	; 0x1392 <xTaskResumeAll+0xbe>
    13ae:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <xYieldPending>
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	31 f4       	brne	.+12     	; 0x13c2 <xTaskResumeAll+0xee>
    13b6:	0e 94 2d 02 	call	0x45a	; 0x45a <vPortYield>
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	03 c0       	rjmp	.+6      	; 0x13c4 <xTaskResumeAll+0xf0>
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	01 c0       	rjmp	.+2      	; 0x13c4 <xTaskResumeAll+0xf0>
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	0f 90       	pop	r0
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	1f 91       	pop	r17
    13ce:	0f 91       	pop	r16
    13d0:	ff 90       	pop	r15
    13d2:	ef 90       	pop	r14
    13d4:	df 90       	pop	r13
    13d6:	08 95       	ret

000013d8 <prvIdleTask>:
    13d8:	09 e6       	ldi	r16, 0x69	; 105
    13da:	17 e0       	ldi	r17, 0x07	; 7
    13dc:	0f 2e       	mov	r0, r31
    13de:	f1 e9       	ldi	r31, 0x91	; 145
    13e0:	ef 2e       	mov	r14, r31
    13e2:	f7 e0       	ldi	r31, 0x07	; 7
    13e4:	ff 2e       	mov	r15, r31
    13e6:	f0 2d       	mov	r31, r0
    13e8:	29 c0       	rjmp	.+82     	; 0x143c <prvIdleTask+0x64>
    13ea:	0e 94 9d 08 	call	0x113a	; 0x113a <vTaskSuspendAll>
    13ee:	d8 01       	movw	r26, r16
    13f0:	cc 91       	ld	r28, X
    13f2:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <xTaskResumeAll>
    13f6:	cc 23       	and	r28, r28
    13f8:	09 f1       	breq	.+66     	; 0x143c <prvIdleTask+0x64>
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	f8 94       	cli
    13fe:	0f 92       	push	r0
    1400:	d8 01       	movw	r26, r16
    1402:	15 96       	adiw	r26, 0x05	; 5
    1404:	ed 91       	ld	r30, X+
    1406:	fc 91       	ld	r31, X
    1408:	16 97       	sbiw	r26, 0x06	; 6
    140a:	c6 81       	ldd	r28, Z+6	; 0x06
    140c:	d7 81       	ldd	r29, Z+7	; 0x07
    140e:	ce 01       	movw	r24, r28
    1410:	02 96       	adiw	r24, 0x02	; 2
    1412:	0e 94 61 01 	call	0x2c2	; 0x2c2 <uxListRemove>
    1416:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <uxCurrentNumberOfTasks>
    141a:	81 50       	subi	r24, 0x01	; 1
    141c:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <uxCurrentNumberOfTasks>
    1420:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <uxTasksDeleted>
    1424:	81 50       	subi	r24, 0x01	; 1
    1426:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <uxTasksDeleted>
    142a:	0f 90       	pop	r0
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	8f 89       	ldd	r24, Y+23	; 0x17
    1430:	98 8d       	ldd	r25, Y+24	; 0x18
    1432:	0e 94 89 03 	call	0x712	; 0x712 <vPortFree>
    1436:	ce 01       	movw	r24, r28
    1438:	0e 94 89 03 	call	0x712	; 0x712 <vPortFree>
    143c:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <uxTasksDeleted>
    1440:	81 11       	cpse	r24, r1
    1442:	d3 cf       	rjmp	.-90     	; 0x13ea <prvIdleTask+0x12>
    1444:	f7 01       	movw	r30, r14
    1446:	80 81       	ld	r24, Z
    1448:	82 30       	cpi	r24, 0x02	; 2
    144a:	c0 f3       	brcs	.-16     	; 0x143c <prvIdleTask+0x64>
    144c:	0e 94 2d 02 	call	0x45a	; 0x45a <vPortYield>
    1450:	f5 cf       	rjmp	.-22     	; 0x143c <prvIdleTask+0x64>

00001452 <vTaskSwitchContext>:
    1452:	80 91 55 07 	lds	r24, 0x0755	; 0x800755 <uxSchedulerSuspended>
    1456:	88 23       	and	r24, r24
    1458:	21 f0       	breq	.+8      	; 0x1462 <vTaskSwitchContext+0x10>
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <xYieldPending>
    1460:	08 95       	ret
    1462:	10 92 58 07 	sts	0x0758, r1	; 0x800758 <xYieldPending>
    1466:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <uxTopReadyPriority>
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	fc 01       	movw	r30, r24
    146e:	ee 0f       	add	r30, r30
    1470:	ff 1f       	adc	r31, r31
    1472:	ee 0f       	add	r30, r30
    1474:	ff 1f       	adc	r31, r31
    1476:	ee 0f       	add	r30, r30
    1478:	ff 1f       	adc	r31, r31
    147a:	8e 0f       	add	r24, r30
    147c:	9f 1f       	adc	r25, r31
    147e:	fc 01       	movw	r30, r24
    1480:	ef 56       	subi	r30, 0x6F	; 111
    1482:	f8 4f       	sbci	r31, 0xF8	; 248
    1484:	80 81       	ld	r24, Z
    1486:	81 11       	cpse	r24, r1
    1488:	17 c0       	rjmp	.+46     	; 0x14b8 <vTaskSwitchContext+0x66>
    148a:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <uxTopReadyPriority>
    148e:	81 50       	subi	r24, 0x01	; 1
    1490:	80 93 5b 07 	sts	0x075B, r24	; 0x80075b <uxTopReadyPriority>
    1494:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <uxTopReadyPriority>
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	fc 01       	movw	r30, r24
    149c:	ee 0f       	add	r30, r30
    149e:	ff 1f       	adc	r31, r31
    14a0:	ee 0f       	add	r30, r30
    14a2:	ff 1f       	adc	r31, r31
    14a4:	ee 0f       	add	r30, r30
    14a6:	ff 1f       	adc	r31, r31
    14a8:	8e 0f       	add	r24, r30
    14aa:	9f 1f       	adc	r25, r31
    14ac:	fc 01       	movw	r30, r24
    14ae:	ef 56       	subi	r30, 0x6F	; 111
    14b0:	f8 4f       	sbci	r31, 0xF8	; 248
    14b2:	80 81       	ld	r24, Z
    14b4:	88 23       	and	r24, r24
    14b6:	49 f3       	breq	.-46     	; 0x148a <vTaskSwitchContext+0x38>
    14b8:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <uxTopReadyPriority>
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	9c 01       	movw	r18, r24
    14c0:	22 0f       	add	r18, r18
    14c2:	33 1f       	adc	r19, r19
    14c4:	22 0f       	add	r18, r18
    14c6:	33 1f       	adc	r19, r19
    14c8:	22 0f       	add	r18, r18
    14ca:	33 1f       	adc	r19, r19
    14cc:	28 0f       	add	r18, r24
    14ce:	39 1f       	adc	r19, r25
    14d0:	d9 01       	movw	r26, r18
    14d2:	af 56       	subi	r26, 0x6F	; 111
    14d4:	b8 4f       	sbci	r27, 0xF8	; 248
    14d6:	11 96       	adiw	r26, 0x01	; 1
    14d8:	ed 91       	ld	r30, X+
    14da:	fc 91       	ld	r31, X
    14dc:	12 97       	sbiw	r26, 0x02	; 2
    14de:	02 80       	ldd	r0, Z+2	; 0x02
    14e0:	f3 81       	ldd	r31, Z+3	; 0x03
    14e2:	e0 2d       	mov	r30, r0
    14e4:	12 96       	adiw	r26, 0x02	; 2
    14e6:	fc 93       	st	X, r31
    14e8:	ee 93       	st	-X, r30
    14ea:	11 97       	sbiw	r26, 0x01	; 1
    14ec:	2c 56       	subi	r18, 0x6C	; 108
    14ee:	38 4f       	sbci	r19, 0xF8	; 248
    14f0:	e2 17       	cp	r30, r18
    14f2:	f3 07       	cpc	r31, r19
    14f4:	29 f4       	brne	.+10     	; 0x1500 <vTaskSwitchContext+0xae>
    14f6:	22 81       	ldd	r18, Z+2	; 0x02
    14f8:	33 81       	ldd	r19, Z+3	; 0x03
    14fa:	fd 01       	movw	r30, r26
    14fc:	32 83       	std	Z+2, r19	; 0x02
    14fe:	21 83       	std	Z+1, r18	; 0x01
    1500:	fc 01       	movw	r30, r24
    1502:	ee 0f       	add	r30, r30
    1504:	ff 1f       	adc	r31, r31
    1506:	ee 0f       	add	r30, r30
    1508:	ff 1f       	adc	r31, r31
    150a:	ee 0f       	add	r30, r30
    150c:	ff 1f       	adc	r31, r31
    150e:	8e 0f       	add	r24, r30
    1510:	9f 1f       	adc	r25, r31
    1512:	fc 01       	movw	r30, r24
    1514:	ef 56       	subi	r30, 0x6F	; 111
    1516:	f8 4f       	sbci	r31, 0xF8	; 248
    1518:	01 80       	ldd	r0, Z+1	; 0x01
    151a:	f2 81       	ldd	r31, Z+2	; 0x02
    151c:	e0 2d       	mov	r30, r0
    151e:	86 81       	ldd	r24, Z+6	; 0x06
    1520:	97 81       	ldd	r25, Z+7	; 0x07
    1522:	90 93 b6 07 	sts	0x07B6, r25	; 0x8007b6 <pxCurrentTCB+0x1>
    1526:	80 93 b5 07 	sts	0x07B5, r24	; 0x8007b5 <pxCurrentTCB>
    152a:	08 95       	ret

0000152c <vTaskPlaceOnEventList>:
    152c:	cf 93       	push	r28
    152e:	df 93       	push	r29
    1530:	eb 01       	movw	r28, r22
    1532:	60 91 b5 07 	lds	r22, 0x07B5	; 0x8007b5 <pxCurrentTCB>
    1536:	70 91 b6 07 	lds	r23, 0x07B6	; 0x8007b6 <pxCurrentTCB+0x1>
    153a:	64 5f       	subi	r22, 0xF4	; 244
    153c:	7f 4f       	sbci	r23, 0xFF	; 255
    153e:	0e 94 30 01 	call	0x260	; 0x260 <vListInsert>
    1542:	80 91 b5 07 	lds	r24, 0x07B5	; 0x8007b5 <pxCurrentTCB>
    1546:	90 91 b6 07 	lds	r25, 0x07B6	; 0x8007b6 <pxCurrentTCB+0x1>
    154a:	02 96       	adiw	r24, 0x02	; 2
    154c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <uxListRemove>
    1550:	cf 3f       	cpi	r28, 0xFF	; 255
    1552:	8f ef       	ldi	r24, 0xFF	; 255
    1554:	d8 07       	cpc	r29, r24
    1556:	59 f4       	brne	.+22     	; 0x156e <vTaskPlaceOnEventList+0x42>
    1558:	60 91 b5 07 	lds	r22, 0x07B5	; 0x8007b5 <pxCurrentTCB>
    155c:	70 91 b6 07 	lds	r23, 0x07B6	; 0x8007b6 <pxCurrentTCB+0x1>
    1560:	6e 5f       	subi	r22, 0xFE	; 254
    1562:	7f 4f       	sbci	r23, 0xFF	; 255
    1564:	8f e5       	ldi	r24, 0x5F	; 95
    1566:	97 e0       	ldi	r25, 0x07	; 7
    1568:	0e 94 0f 01 	call	0x21e	; 0x21e <vListInsertEnd>
    156c:	08 c0       	rjmp	.+16     	; 0x157e <vTaskPlaceOnEventList+0x52>
    156e:	80 91 5c 07 	lds	r24, 0x075C	; 0x80075c <xTickCount>
    1572:	90 91 5d 07 	lds	r25, 0x075D	; 0x80075d <xTickCount+0x1>
    1576:	8c 0f       	add	r24, r28
    1578:	9d 1f       	adc	r25, r29
    157a:	0e 94 26 07 	call	0xe4c	; 0xe4c <prvAddCurrentTaskToDelayedList>
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	08 95       	ret

00001584 <vTaskPlaceOnEventListRestricted>:
    1584:	cf 93       	push	r28
    1586:	df 93       	push	r29
    1588:	eb 01       	movw	r28, r22
    158a:	60 91 b5 07 	lds	r22, 0x07B5	; 0x8007b5 <pxCurrentTCB>
    158e:	70 91 b6 07 	lds	r23, 0x07B6	; 0x8007b6 <pxCurrentTCB+0x1>
    1592:	64 5f       	subi	r22, 0xF4	; 244
    1594:	7f 4f       	sbci	r23, 0xFF	; 255
    1596:	0e 94 0f 01 	call	0x21e	; 0x21e <vListInsertEnd>
    159a:	80 91 b5 07 	lds	r24, 0x07B5	; 0x8007b5 <pxCurrentTCB>
    159e:	90 91 b6 07 	lds	r25, 0x07B6	; 0x8007b6 <pxCurrentTCB+0x1>
    15a2:	02 96       	adiw	r24, 0x02	; 2
    15a4:	0e 94 61 01 	call	0x2c2	; 0x2c2 <uxListRemove>
    15a8:	80 91 5c 07 	lds	r24, 0x075C	; 0x80075c <xTickCount>
    15ac:	90 91 5d 07 	lds	r25, 0x075D	; 0x80075d <xTickCount+0x1>
    15b0:	8c 0f       	add	r24, r28
    15b2:	9d 1f       	adc	r25, r29
    15b4:	0e 94 26 07 	call	0xe4c	; 0xe4c <prvAddCurrentTaskToDelayedList>
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	08 95       	ret

000015be <xTaskRemoveFromEventList>:
    15be:	0f 93       	push	r16
    15c0:	1f 93       	push	r17
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	dc 01       	movw	r26, r24
    15c8:	15 96       	adiw	r26, 0x05	; 5
    15ca:	ed 91       	ld	r30, X+
    15cc:	fc 91       	ld	r31, X
    15ce:	16 97       	sbiw	r26, 0x06	; 6
    15d0:	c6 81       	ldd	r28, Z+6	; 0x06
    15d2:	d7 81       	ldd	r29, Z+7	; 0x07
    15d4:	8e 01       	movw	r16, r28
    15d6:	04 5f       	subi	r16, 0xF4	; 244
    15d8:	1f 4f       	sbci	r17, 0xFF	; 255
    15da:	c8 01       	movw	r24, r16
    15dc:	0e 94 61 01 	call	0x2c2	; 0x2c2 <uxListRemove>
    15e0:	80 91 55 07 	lds	r24, 0x0755	; 0x800755 <uxSchedulerSuspended>
    15e4:	81 11       	cpse	r24, r1
    15e6:	1c c0       	rjmp	.+56     	; 0x1620 <xTaskRemoveFromEventList+0x62>
    15e8:	0a 50       	subi	r16, 0x0A	; 10
    15ea:	11 09       	sbc	r17, r1
    15ec:	c8 01       	movw	r24, r16
    15ee:	0e 94 61 01 	call	0x2c2	; 0x2c2 <uxListRemove>
    15f2:	8e 89       	ldd	r24, Y+22	; 0x16
    15f4:	90 91 5b 07 	lds	r25, 0x075B	; 0x80075b <uxTopReadyPriority>
    15f8:	98 17       	cp	r25, r24
    15fa:	10 f4       	brcc	.+4      	; 0x1600 <xTaskRemoveFromEventList+0x42>
    15fc:	80 93 5b 07 	sts	0x075B, r24	; 0x80075b <uxTopReadyPriority>
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	9c 01       	movw	r18, r24
    1604:	22 0f       	add	r18, r18
    1606:	33 1f       	adc	r19, r19
    1608:	22 0f       	add	r18, r18
    160a:	33 1f       	adc	r19, r19
    160c:	22 0f       	add	r18, r18
    160e:	33 1f       	adc	r19, r19
    1610:	82 0f       	add	r24, r18
    1612:	93 1f       	adc	r25, r19
    1614:	b8 01       	movw	r22, r16
    1616:	8f 56       	subi	r24, 0x6F	; 111
    1618:	98 4f       	sbci	r25, 0xF8	; 248
    161a:	0e 94 0f 01 	call	0x21e	; 0x21e <vListInsertEnd>
    161e:	05 c0       	rjmp	.+10     	; 0x162a <xTaskRemoveFromEventList+0x6c>
    1620:	b8 01       	movw	r22, r16
    1622:	82 e7       	ldi	r24, 0x72	; 114
    1624:	97 e0       	ldi	r25, 0x07	; 7
    1626:	0e 94 0f 01 	call	0x21e	; 0x21e <vListInsertEnd>
    162a:	e0 91 b5 07 	lds	r30, 0x07B5	; 0x8007b5 <pxCurrentTCB>
    162e:	f0 91 b6 07 	lds	r31, 0x07B6	; 0x8007b6 <pxCurrentTCB+0x1>
    1632:	9e 89       	ldd	r25, Y+22	; 0x16
    1634:	86 89       	ldd	r24, Z+22	; 0x16
    1636:	89 17       	cp	r24, r25
    1638:	20 f4       	brcc	.+8      	; 0x1642 <xTaskRemoveFromEventList+0x84>
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <xYieldPending>
    1640:	01 c0       	rjmp	.+2      	; 0x1644 <xTaskRemoveFromEventList+0x86>
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	1f 91       	pop	r17
    164a:	0f 91       	pop	r16
    164c:	08 95       	ret

0000164e <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    164e:	20 91 57 07 	lds	r18, 0x0757	; 0x800757 <xNumOfOverflows>
    1652:	fc 01       	movw	r30, r24
    1654:	20 83       	st	Z, r18
	pxTimeOut->xTimeOnEntering = xTickCount;
    1656:	20 91 5c 07 	lds	r18, 0x075C	; 0x80075c <xTickCount>
    165a:	30 91 5d 07 	lds	r19, 0x075D	; 0x80075d <xTickCount+0x1>
    165e:	32 83       	std	Z+2, r19	; 0x02
    1660:	21 83       	std	Z+1, r18	; 0x01
    1662:	08 95       	ret

00001664 <xTaskCheckForTimeOut>:
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	f8 94       	cli
    1668:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    166a:	40 91 5c 07 	lds	r20, 0x075C	; 0x80075c <xTickCount>
    166e:	50 91 5d 07 	lds	r21, 0x075D	; 0x80075d <xTickCount+0x1>

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    1672:	db 01       	movw	r26, r22
    1674:	2d 91       	ld	r18, X+
    1676:	3c 91       	ld	r19, X
    1678:	2f 3f       	cpi	r18, 0xFF	; 255
    167a:	bf ef       	ldi	r27, 0xFF	; 255
    167c:	3b 07       	cpc	r19, r27
    167e:	19 f1       	breq	.+70     	; 0x16c6 <xTaskCheckForTimeOut+0x62>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    1680:	e0 91 57 07 	lds	r30, 0x0757	; 0x800757 <xNumOfOverflows>
    1684:	dc 01       	movw	r26, r24
    1686:	fc 91       	ld	r31, X
    1688:	fe 17       	cp	r31, r30
    168a:	39 f0       	breq	.+14     	; 0x169a <xTaskCheckForTimeOut+0x36>
    168c:	11 96       	adiw	r26, 0x01	; 1
    168e:	ed 91       	ld	r30, X+
    1690:	fc 91       	ld	r31, X
    1692:	12 97       	sbiw	r26, 0x02	; 2
    1694:	4e 17       	cp	r20, r30
    1696:	5f 07       	cpc	r21, r31
    1698:	c0 f4       	brcc	.+48     	; 0x16ca <xTaskCheckForTimeOut+0x66>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    169a:	dc 01       	movw	r26, r24
    169c:	11 96       	adiw	r26, 0x01	; 1
    169e:	ed 91       	ld	r30, X+
    16a0:	fc 91       	ld	r31, X
    16a2:	12 97       	sbiw	r26, 0x02	; 2
    16a4:	da 01       	movw	r26, r20
    16a6:	ae 1b       	sub	r26, r30
    16a8:	bf 0b       	sbc	r27, r31
    16aa:	a2 17       	cp	r26, r18
    16ac:	b3 07       	cpc	r27, r19
    16ae:	78 f4       	brcc	.+30     	; 0x16ce <xTaskCheckForTimeOut+0x6a>
    16b0:	db 01       	movw	r26, r22
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    16b2:	e4 1b       	sub	r30, r20
    16b4:	f5 0b       	sbc	r31, r21
    16b6:	2e 0f       	add	r18, r30
    16b8:	3f 1f       	adc	r19, r31
    16ba:	2d 93       	st	X+, r18
    16bc:	3c 93       	st	X, r19
			vTaskSetTimeOutState( pxTimeOut );
    16be:	0e 94 27 0b 	call	0x164e	; 0x164e <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	05 c0       	rjmp	.+10     	; 0x16d0 <xTaskCheckForTimeOut+0x6c>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	03 c0       	rjmp	.+6      	; 0x16d0 <xTaskCheckForTimeOut+0x6c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	01 c0       	rjmp	.+2      	; 0x16d0 <xTaskCheckForTimeOut+0x6c>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    16ce:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	taskEXIT_CRITICAL();
    16d0:	0f 90       	pop	r0
    16d2:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    16d4:	08 95       	ret

000016d6 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <xYieldPending>
    16dc:	08 95       	ret

000016de <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    16de:	80 91 5a 07 	lds	r24, 0x075A	; 0x80075a <xSchedulerRunning>
    16e2:	88 23       	and	r24, r24
    16e4:	31 f0       	breq	.+12     	; 0x16f2 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    16e6:	80 91 55 07 	lds	r24, 0x0755	; 0x800755 <uxSchedulerSuspended>
    16ea:	88 23       	and	r24, r24
    16ec:	21 f0       	breq	.+8      	; 0x16f6 <xTaskGetSchedulerState+0x18>
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	08 95       	ret
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	08 95       	ret
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
			{
				xReturn = taskSCHEDULER_RUNNING;
    16f6:	82 e0       	ldi	r24, 0x02	; 2
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
    16f8:	08 95       	ret

000016fa <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    16fa:	fc 01       	movw	r30, r24
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    16fc:	73 83       	std	Z+3, r23	; 0x03
    16fe:	62 83       	std	Z+2, r22	; 0x02
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1700:	91 87       	std	Z+9, r25	; 0x09
    1702:	80 87       	std	Z+8, r24	; 0x08

	if( xNextExpiryTime <= xTimeNow )
    1704:	46 17       	cp	r20, r22
    1706:	57 07       	cpc	r21, r23
    1708:	90 f0       	brcs	.+36     	; 0x172e <prvInsertTimerInActiveList+0x34>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    170a:	42 1b       	sub	r20, r18
    170c:	53 0b       	sbc	r21, r19
    170e:	84 85       	ldd	r24, Z+12	; 0x0c
    1710:	95 85       	ldd	r25, Z+13	; 0x0d
    1712:	48 17       	cp	r20, r24
    1714:	59 07       	cpc	r21, r25
    1716:	e0 f4       	brcc	.+56     	; 0x1750 <prvInsertTimerInActiveList+0x56>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    1718:	bf 01       	movw	r22, r30
    171a:	6e 5f       	subi	r22, 0xFE	; 254
    171c:	7f 4f       	sbci	r23, 0xFF	; 255
    171e:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <pxOverflowTimerList>
    1722:	90 91 bc 07 	lds	r25, 0x07BC	; 0x8007bc <pxOverflowTimerList+0x1>
    1726:	0e 94 30 01 	call	0x260	; 0x260 <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	08 95       	ret
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    172e:	42 17       	cp	r20, r18
    1730:	53 07       	cpc	r21, r19
    1732:	18 f4       	brcc	.+6      	; 0x173a <prvInsertTimerInActiveList+0x40>
    1734:	62 17       	cp	r22, r18
    1736:	73 07       	cpc	r23, r19
    1738:	68 f4       	brcc	.+26     	; 0x1754 <prvInsertTimerInActiveList+0x5a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    173a:	bf 01       	movw	r22, r30
    173c:	6e 5f       	subi	r22, 0xFE	; 254
    173e:	7f 4f       	sbci	r23, 0xFF	; 255
    1740:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <pxCurrentTimerList>
    1744:	90 91 be 07 	lds	r25, 0x07BE	; 0x8007be <pxCurrentTimerList+0x1>
    1748:	0e 94 30 01 	call	0x260	; 0x260 <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	08 95       	ret
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	08 95       	ret
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    1754:	81 e0       	ldi	r24, 0x01	; 1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
    1756:	08 95       	ret

00001758 <prvCheckForValidListAndQueue>:
static void prvCheckForValidListAndQueue( void )
{
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	f8 94       	cli
    175c:	0f 92       	push	r0
	{
		if( xTimerQueue == NULL )
    175e:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <xTimerQueue>
    1762:	90 91 ba 07 	lds	r25, 0x07BA	; 0x8007ba <xTimerQueue+0x1>
    1766:	89 2b       	or	r24, r25
    1768:	19 f5       	brne	.+70     	; 0x17b0 <prvCheckForValidListAndQueue+0x58>
		{
			vListInitialise( &xActiveTimerList1 );
    176a:	88 ec       	ldi	r24, 0xC8	; 200
    176c:	97 e0       	ldi	r25, 0x07	; 7
    176e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
    1772:	8f eb       	ldi	r24, 0xBF	; 191
    1774:	97 e0       	ldi	r25, 0x07	; 7
    1776:	0e 94 fd 00 	call	0x1fa	; 0x1fa <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
    177a:	88 ec       	ldi	r24, 0xC8	; 200
    177c:	97 e0       	ldi	r25, 0x07	; 7
    177e:	90 93 be 07 	sts	0x07BE, r25	; 0x8007be <pxCurrentTimerList+0x1>
    1782:	80 93 bd 07 	sts	0x07BD, r24	; 0x8007bd <pxCurrentTimerList>
			pxOverflowTimerList = &xActiveTimerList2;
    1786:	8f eb       	ldi	r24, 0xBF	; 191
    1788:	97 e0       	ldi	r25, 0x07	; 7
    178a:	90 93 bc 07 	sts	0x07BC, r25	; 0x8007bc <pxOverflowTimerList+0x1>
    178e:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <pxOverflowTimerList>
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    1792:	40 e0       	ldi	r20, 0x00	; 0
    1794:	65 e0       	ldi	r22, 0x05	; 5
    1796:	8a e0       	ldi	r24, 0x0A	; 10
    1798:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <xQueueGenericCreate>
    179c:	90 93 ba 07 	sts	0x07BA, r25	; 0x8007ba <xTimerQueue+0x1>
    17a0:	80 93 b9 07 	sts	0x07B9, r24	; 0x8007b9 <xTimerQueue>
			configASSERT( xTimerQueue );

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
    17a4:	00 97       	sbiw	r24, 0x00	; 0
    17a6:	21 f0       	breq	.+8      	; 0x17b0 <prvCheckForValidListAndQueue+0x58>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
    17a8:	63 e6       	ldi	r22, 0x63	; 99
    17aa:	71 e0       	ldi	r23, 0x01	; 1
    17ac:	0e 94 c3 06 	call	0xd86	; 0xd86 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    17b0:	0f 90       	pop	r0
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	08 95       	ret

000017b6 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    17b6:	af 92       	push	r10
    17b8:	bf 92       	push	r11
    17ba:	cf 92       	push	r12
    17bc:	df 92       	push	r13
    17be:	ef 92       	push	r14
    17c0:	ff 92       	push	r15
    17c2:	0f 93       	push	r16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    17c4:	0e 94 ac 0b 	call	0x1758	; 0x1758 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
    17c8:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <xTimerQueue>
    17cc:	90 91 ba 07 	lds	r25, 0x07BA	; 0x8007ba <xTimerQueue+0x1>
    17d0:	89 2b       	or	r24, r25
    17d2:	91 f0       	breq	.+36     	; 0x17f8 <xTimerCreateTimerTask+0x42>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
    17d4:	a1 2c       	mov	r10, r1
    17d6:	b1 2c       	mov	r11, r1
    17d8:	c1 2c       	mov	r12, r1
    17da:	d1 2c       	mov	r13, r1
    17dc:	e1 2c       	mov	r14, r1
    17de:	f1 2c       	mov	r15, r1
    17e0:	03 e0       	ldi	r16, 0x03	; 3
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	40 e8       	ldi	r20, 0x80	; 128
    17e8:	50 e0       	ldi	r21, 0x00	; 0
    17ea:	68 e6       	ldi	r22, 0x68	; 104
    17ec:	71 e0       	ldi	r23, 0x01	; 1
    17ee:	85 ef       	ldi	r24, 0xF5	; 245
    17f0:	9c e0       	ldi	r25, 0x0C	; 12
    17f2:	0e 94 5d 07 	call	0xeba	; 0xeba <xTaskGenericCreate>
    17f6:	01 c0       	rjmp	.+2      	; 0x17fa <xTimerCreateTimerTask+0x44>

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
    17f8:	80 e0       	ldi	r24, 0x00	; 0
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
}
    17fa:	0f 91       	pop	r16
    17fc:	ff 90       	pop	r15
    17fe:	ef 90       	pop	r14
    1800:	df 90       	pop	r13
    1802:	cf 90       	pop	r12
    1804:	bf 90       	pop	r11
    1806:	af 90       	pop	r10
    1808:	08 95       	ret

0000180a <xTimerCreate>:
/*-----------------------------------------------------------*/

TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    180a:	8f 92       	push	r8
    180c:	9f 92       	push	r9
    180e:	bf 92       	push	r11
    1810:	cf 92       	push	r12
    1812:	df 92       	push	r13
    1814:	ef 92       	push	r14
    1816:	ff 92       	push	r15
    1818:	0f 93       	push	r16
    181a:	1f 93       	push	r17
    181c:	cf 93       	push	r28
    181e:	df 93       	push	r29
Timer_t *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
    1820:	61 15       	cp	r22, r1
    1822:	71 05       	cpc	r23, r1
    1824:	d9 f0       	breq	.+54     	; 0x185c <xTimerCreate+0x52>
    1826:	69 01       	movw	r12, r18
    1828:	b4 2e       	mov	r11, r20
    182a:	7b 01       	movw	r14, r22
    182c:	4c 01       	movw	r8, r24
	{
		pxNewTimer = NULL;
	}
	else
	{
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
    182e:	83 e1       	ldi	r24, 0x13	; 19
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	0e 94 ef 02 	call	0x5de	; 0x5de <pvPortMalloc>
    1836:	ec 01       	movw	r28, r24
		if( pxNewTimer != NULL )
    1838:	89 2b       	or	r24, r25
    183a:	91 f0       	breq	.+36     	; 0x1860 <xTimerCreate+0x56>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
    183c:	0e 94 ac 0b 	call	0x1758	; 0x1758 <prvCheckForValidListAndQueue>

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
    1840:	99 82       	std	Y+1, r9	; 0x01
    1842:	88 82       	st	Y, r8
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    1844:	fd 86       	std	Y+13, r15	; 0x0d
    1846:	ec 86       	std	Y+12, r14	; 0x0c
			pxNewTimer->uxAutoReload = uxAutoReload;
    1848:	be 86       	std	Y+14, r11	; 0x0e
			pxNewTimer->pvTimerID = pvTimerID;
    184a:	d8 8a       	std	Y+16, r13	; 0x10
    184c:	cf 86       	std	Y+15, r12	; 0x0f
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    184e:	1a 8b       	std	Y+18, r17	; 0x12
    1850:	09 8b       	std	Y+17, r16	; 0x11
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    1852:	ce 01       	movw	r24, r28
    1854:	02 96       	adiw	r24, 0x02	; 2
    1856:	0e 94 0b 01 	call	0x216	; 0x216 <vListInitialiseItem>
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <xTimerCreate+0x56>
Timer_t *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
	{
		pxNewTimer = NULL;
    185c:	c0 e0       	ldi	r28, 0x00	; 0
    185e:	d0 e0       	ldi	r29, 0x00	; 0

	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );

	return ( TimerHandle_t ) pxNewTimer;
}
    1860:	ce 01       	movw	r24, r28
    1862:	df 91       	pop	r29
    1864:	cf 91       	pop	r28
    1866:	1f 91       	pop	r17
    1868:	0f 91       	pop	r16
    186a:	ff 90       	pop	r15
    186c:	ef 90       	pop	r14
    186e:	df 90       	pop	r13
    1870:	cf 90       	pop	r12
    1872:	bf 90       	pop	r11
    1874:	9f 90       	pop	r9
    1876:	8f 90       	pop	r8
    1878:	08 95       	ret

0000187a <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    187a:	0f 93       	push	r16
    187c:	1f 93       	push	r17
    187e:	cf 93       	push	r28
    1880:	df 93       	push	r29
    1882:	00 d0       	rcall	.+0      	; 0x1884 <xTimerGenericCommand+0xa>
    1884:	00 d0       	rcall	.+0      	; 0x1886 <xTimerGenericCommand+0xc>
    1886:	1f 92       	push	r1
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    188c:	e0 91 b9 07 	lds	r30, 0x07B9	; 0x8007b9 <xTimerQueue>
    1890:	f0 91 ba 07 	lds	r31, 0x07BA	; 0x8007ba <xTimerQueue+0x1>
    1894:	30 97       	sbiw	r30, 0x00	; 0
    1896:	71 f1       	breq	.+92     	; 0x18f4 <xTimerGenericCommand+0x7a>
    1898:	d9 01       	movw	r26, r18
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    189a:	69 83       	std	Y+1, r22	; 0x01
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    189c:	5b 83       	std	Y+3, r21	; 0x03
    189e:	4a 83       	std	Y+2, r20	; 0x02
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    18a0:	9d 83       	std	Y+5, r25	; 0x05
    18a2:	8c 83       	std	Y+4, r24	; 0x04

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    18a4:	66 30       	cpi	r22, 0x06	; 6
    18a6:	ec f4       	brge	.+58     	; 0x18e2 <xTimerGenericCommand+0x68>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    18a8:	0e 94 6f 0b 	call	0x16de	; 0x16de <xTaskGetSchedulerState>
    18ac:	82 30       	cpi	r24, 0x02	; 2
    18ae:	61 f4       	brne	.+24     	; 0x18c8 <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	a8 01       	movw	r20, r16
    18b4:	be 01       	movw	r22, r28
    18b6:	6f 5f       	subi	r22, 0xFF	; 255
    18b8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ba:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <xTimerQueue>
    18be:	90 91 ba 07 	lds	r25, 0x07BA	; 0x8007ba <xTimerQueue+0x1>
    18c2:	0e 94 19 05 	call	0xa32	; 0xa32 <xQueueGenericSend>
    18c6:	17 c0       	rjmp	.+46     	; 0x18f6 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	40 e0       	ldi	r20, 0x00	; 0
    18cc:	50 e0       	ldi	r21, 0x00	; 0
    18ce:	be 01       	movw	r22, r28
    18d0:	6f 5f       	subi	r22, 0xFF	; 255
    18d2:	7f 4f       	sbci	r23, 0xFF	; 255
    18d4:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <xTimerQueue>
    18d8:	90 91 ba 07 	lds	r25, 0x07BA	; 0x8007ba <xTimerQueue+0x1>
    18dc:	0e 94 19 05 	call	0xa32	; 0xa32 <xQueueGenericSend>
    18e0:	0a c0       	rjmp	.+20     	; 0x18f6 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	ad 01       	movw	r20, r26
    18e6:	be 01       	movw	r22, r28
    18e8:	6f 5f       	subi	r22, 0xFF	; 255
    18ea:	7f 4f       	sbci	r23, 0xFF	; 255
    18ec:	cf 01       	movw	r24, r30
    18ee:	0e 94 c8 05 	call	0xb90	; 0xb90 <xQueueGenericSendFromISR>
    18f2:	01 c0       	rjmp	.+2      	; 0x18f6 <xTimerGenericCommand+0x7c>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    18f4:	80 e0       	ldi	r24, 0x00	; 0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	df 91       	pop	r29
    1902:	cf 91       	pop	r28
    1904:	1f 91       	pop	r17
    1906:	0f 91       	pop	r16
    1908:	08 95       	ret

0000190a <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    190a:	af 92       	push	r10
    190c:	bf 92       	push	r11
    190e:	cf 92       	push	r12
    1910:	df 92       	push	r13
    1912:	ef 92       	push	r14
    1914:	ff 92       	push	r15
    1916:	0f 93       	push	r16
    1918:	1f 93       	push	r17
    191a:	cf 93       	push	r28
    191c:	df 93       	push	r29
    191e:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    1920:	0e 94 a3 08 	call	0x1146	; 0x1146 <xTaskGetTickCount>
    1924:	7c 01       	movw	r14, r24

	if( xTimeNow < xLastTime )
    1926:	80 91 b7 07 	lds	r24, 0x07B7	; 0x8007b7 <xLastTime.2262>
    192a:	90 91 b8 07 	lds	r25, 0x07B8	; 0x8007b8 <xLastTime.2262+0x1>
    192e:	e8 16       	cp	r14, r24
    1930:	f9 06       	cpc	r15, r25
    1932:	08 f0       	brcs	.+2      	; 0x1936 <prvSampleTimeNow+0x2c>
    1934:	48 c0       	rjmp	.+144    	; 0x19c6 <prvSampleTimeNow+0xbc>
    1936:	30 c0       	rjmp	.+96     	; 0x1998 <prvSampleTimeNow+0x8e>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1938:	05 80       	ldd	r0, Z+5	; 0x05
    193a:	f6 81       	ldd	r31, Z+6	; 0x06
    193c:	e0 2d       	mov	r30, r0
    193e:	a0 80       	ld	r10, Z
    1940:	b1 80       	ldd	r11, Z+1	; 0x01

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    1942:	c6 81       	ldd	r28, Z+6	; 0x06
    1944:	d7 81       	ldd	r29, Z+7	; 0x07
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1946:	8e 01       	movw	r16, r28
    1948:	0e 5f       	subi	r16, 0xFE	; 254
    194a:	1f 4f       	sbci	r17, 0xFF	; 255
    194c:	c8 01       	movw	r24, r16
    194e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1952:	e9 89       	ldd	r30, Y+17	; 0x11
    1954:	fa 89       	ldd	r31, Y+18	; 0x12
    1956:	ce 01       	movw	r24, r28
    1958:	09 95       	icall

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    195a:	8e 85       	ldd	r24, Y+14	; 0x0e
    195c:	81 30       	cpi	r24, 0x01	; 1
    195e:	e1 f4       	brne	.+56     	; 0x1998 <prvSampleTimeNow+0x8e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    1960:	8c 85       	ldd	r24, Y+12	; 0x0c
    1962:	9d 85       	ldd	r25, Y+13	; 0x0d
    1964:	8a 0d       	add	r24, r10
    1966:	9b 1d       	adc	r25, r11
			if( xReloadTime > xNextExpireTime )
    1968:	a8 16       	cp	r10, r24
    196a:	b9 06       	cpc	r11, r25
    196c:	60 f4       	brcc	.+24     	; 0x1986 <prvSampleTimeNow+0x7c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    196e:	9b 83       	std	Y+3, r25	; 0x03
    1970:	8a 83       	std	Y+2, r24	; 0x02
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1972:	d9 87       	std	Y+9, r29	; 0x09
    1974:	c8 87       	std	Y+8, r28	; 0x08
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1976:	b8 01       	movw	r22, r16
    1978:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <pxCurrentTimerList>
    197c:	90 91 be 07 	lds	r25, 0x07BE	; 0x8007be <pxCurrentTimerList+0x1>
    1980:	0e 94 30 01 	call	0x260	; 0x260 <vListInsert>
    1984:	09 c0       	rjmp	.+18     	; 0x1998 <prvSampleTimeNow+0x8e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1986:	00 e0       	ldi	r16, 0x00	; 0
    1988:	10 e0       	ldi	r17, 0x00	; 0
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	a5 01       	movw	r20, r10
    1990:	60 e0       	ldi	r22, 0x00	; 0
    1992:	ce 01       	movw	r24, r28
    1994:	0e 94 3d 0c 	call	0x187a	; 0x187a <xTimerGenericCommand>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1998:	e0 91 bd 07 	lds	r30, 0x07BD	; 0x8007bd <pxCurrentTimerList>
    199c:	f0 91 be 07 	lds	r31, 0x07BE	; 0x8007be <pxCurrentTimerList+0x1>
    19a0:	80 81       	ld	r24, Z
    19a2:	81 11       	cpse	r24, r1
    19a4:	c9 cf       	rjmp	.-110    	; 0x1938 <prvSampleTimeNow+0x2e>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
    19a6:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <pxOverflowTimerList>
    19aa:	90 91 bc 07 	lds	r25, 0x07BC	; 0x8007bc <pxOverflowTimerList+0x1>
    19ae:	90 93 be 07 	sts	0x07BE, r25	; 0x8007be <pxCurrentTimerList+0x1>
    19b2:	80 93 bd 07 	sts	0x07BD, r24	; 0x8007bd <pxCurrentTimerList>
	pxOverflowTimerList = pxTemp;
    19b6:	f0 93 bc 07 	sts	0x07BC, r31	; 0x8007bc <pxOverflowTimerList+0x1>
    19ba:	e0 93 bb 07 	sts	0x07BB, r30	; 0x8007bb <pxOverflowTimerList>
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	f6 01       	movw	r30, r12
    19c2:	80 83       	st	Z, r24
    19c4:	02 c0       	rjmp	.+4      	; 0x19ca <prvSampleTimeNow+0xc0>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    19c6:	f6 01       	movw	r30, r12
    19c8:	10 82       	st	Z, r1
	}

	xLastTime = xTimeNow;
    19ca:	f0 92 b8 07 	sts	0x07B8, r15	; 0x8007b8 <xLastTime.2262+0x1>
    19ce:	e0 92 b7 07 	sts	0x07B7, r14	; 0x8007b7 <xLastTime.2262>

	return xTimeNow;
}
    19d2:	c7 01       	movw	r24, r14
    19d4:	df 91       	pop	r29
    19d6:	cf 91       	pop	r28
    19d8:	1f 91       	pop	r17
    19da:	0f 91       	pop	r16
    19dc:	ff 90       	pop	r15
    19de:	ef 90       	pop	r14
    19e0:	df 90       	pop	r13
    19e2:	cf 90       	pop	r12
    19e4:	bf 90       	pop	r11
    19e6:	af 90       	pop	r10
    19e8:	08 95       	ret

000019ea <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <prvTimerTask+0x6>
    19f0:	00 d0       	rcall	.+0      	; 0x19f2 <prvTimerTask+0x8>
    19f2:	00 d0       	rcall	.+0      	; 0x19f4 <prvTimerTask+0xa>
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    19f8:	ce 01       	movw	r24, r28
    19fa:	01 96       	adiw	r24, 0x01	; 1
    19fc:	4c 01       	movw	r8, r24
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    19fe:	e1 2c       	mov	r14, r1
    1a00:	f1 2c       	mov	r15, r1
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    1a02:	c8 2e       	mov	r12, r24
    1a04:	d9 2c       	mov	r13, r9
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    1a06:	e0 91 bd 07 	lds	r30, 0x07BD	; 0x8007bd <pxCurrentTimerList>
    1a0a:	f0 91 be 07 	lds	r31, 0x07BE	; 0x8007be <pxCurrentTimerList+0x1>
	if( *pxListWasEmpty == pdFALSE )
    1a0e:	80 81       	ld	r24, Z
    1a10:	88 23       	and	r24, r24
    1a12:	09 f4       	brne	.+2      	; 0x1a16 <prvTimerTask+0x2c>
    1a14:	c4 c0       	rjmp	.+392    	; 0x1b9e <prvTimerTask+0x1b4>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1a16:	05 80       	ldd	r0, Z+5	; 0x05
    1a18:	f6 81       	ldd	r31, Z+6	; 0x06
    1a1a:	e0 2d       	mov	r30, r0
    1a1c:	a0 80       	ld	r10, Z
    1a1e:	b1 80       	ldd	r11, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    1a20:	0e 94 9d 08 	call	0x113a	; 0x113a <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1a24:	c4 01       	movw	r24, r8
    1a26:	0e 94 85 0c 	call	0x190a	; 0x190a <prvSampleTimeNow>
    1a2a:	8c 01       	movw	r16, r24
		if( xTimerListsWereSwitched == pdFALSE )
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	81 11       	cpse	r24, r1
    1a30:	48 c0       	rjmp	.+144    	; 0x1ac2 <prvTimerTask+0xd8>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    1a32:	0a 15       	cp	r16, r10
    1a34:	1b 05       	cpc	r17, r11
    1a36:	a8 f1       	brcs	.+106    	; 0x1aa2 <prvTimerTask+0xb8>
			{
				( void ) xTaskResumeAll();
    1a38:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    1a3c:	e0 91 bd 07 	lds	r30, 0x07BD	; 0x8007bd <pxCurrentTimerList>
    1a40:	f0 91 be 07 	lds	r31, 0x07BE	; 0x8007be <pxCurrentTimerList+0x1>
    1a44:	05 80       	ldd	r0, Z+5	; 0x05
    1a46:	f6 81       	ldd	r31, Z+6	; 0x06
    1a48:	e0 2d       	mov	r30, r0
    1a4a:	66 80       	ldd	r6, Z+6	; 0x06
    1a4c:	77 80       	ldd	r7, Z+7	; 0x07

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1a4e:	c3 01       	movw	r24, r6
    1a50:	02 96       	adiw	r24, 0x02	; 2
    1a52:	0e 94 61 01 	call	0x2c2	; 0x2c2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    1a56:	d3 01       	movw	r26, r6
    1a58:	1e 96       	adiw	r26, 0x0e	; 14
    1a5a:	8c 91       	ld	r24, X
    1a5c:	1e 97       	sbiw	r26, 0x0e	; 14
    1a5e:	81 30       	cpi	r24, 0x01	; 1
    1a60:	b1 f4       	brne	.+44     	; 0x1a8e <prvTimerTask+0xa4>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    1a62:	1c 96       	adiw	r26, 0x0c	; 12
    1a64:	6d 91       	ld	r22, X+
    1a66:	7c 91       	ld	r23, X
    1a68:	1d 97       	sbiw	r26, 0x0d	; 13
    1a6a:	6a 0d       	add	r22, r10
    1a6c:	7b 1d       	adc	r23, r11
    1a6e:	95 01       	movw	r18, r10
    1a70:	a8 01       	movw	r20, r16
    1a72:	c3 01       	movw	r24, r6
    1a74:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <prvInsertTimerInActiveList>
    1a78:	81 30       	cpi	r24, 0x01	; 1
    1a7a:	49 f4       	brne	.+18     	; 0x1a8e <prvTimerTask+0xa4>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1a7c:	0e 2d       	mov	r16, r14
    1a7e:	1f 2d       	mov	r17, r15
    1a80:	2e 2d       	mov	r18, r14
    1a82:	3f 2d       	mov	r19, r15
    1a84:	a5 01       	movw	r20, r10
    1a86:	60 e0       	ldi	r22, 0x00	; 0
    1a88:	c3 01       	movw	r24, r6
    1a8a:	0e 94 3d 0c 	call	0x187a	; 0x187a <xTimerGenericCommand>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1a8e:	d3 01       	movw	r26, r6
    1a90:	51 96       	adiw	r26, 0x11	; 17
    1a92:	ed 91       	ld	r30, X+
    1a94:	fc 91       	ld	r31, X
    1a96:	52 97       	sbiw	r26, 0x12	; 18
    1a98:	c3 01       	movw	r24, r6
    1a9a:	09 95       	icall
    1a9c:	72 c0       	rjmp	.+228    	; 0x1b82 <prvTimerTask+0x198>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    1a9e:	ae 2c       	mov	r10, r14
    1aa0:	bf 2c       	mov	r11, r15
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    1aa2:	b5 01       	movw	r22, r10
    1aa4:	60 1b       	sub	r22, r16
    1aa6:	71 0b       	sbc	r23, r17
    1aa8:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <xTimerQueue>
    1aac:	90 91 ba 07 	lds	r25, 0x07BA	; 0x8007ba <xTimerQueue+0x1>
    1ab0:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
    1ab4:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <xTaskResumeAll>
    1ab8:	81 11       	cpse	r24, r1
    1aba:	63 c0       	rjmp	.+198    	; 0x1b82 <prvTimerTask+0x198>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
    1abc:	0e 94 2d 02 	call	0x45a	; 0x45a <vPortYield>
    1ac0:	60 c0       	rjmp	.+192    	; 0x1b82 <prvTimerTask+0x198>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    1ac2:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <xTaskResumeAll>
    1ac6:	5d c0       	rjmp	.+186    	; 0x1b82 <prvTimerTask+0x198>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	88 23       	and	r24, r24
    1acc:	0c f4       	brge	.+2      	; 0x1ad0 <prvTimerTask+0xe6>
    1ace:	59 c0       	rjmp	.+178    	; 0x1b82 <prvTimerTask+0x198>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    1ad0:	ac 80       	ldd	r10, Y+4	; 0x04
    1ad2:	bd 80       	ldd	r11, Y+5	; 0x05

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    1ad4:	f5 01       	movw	r30, r10
    1ad6:	82 85       	ldd	r24, Z+10	; 0x0a
    1ad8:	93 85       	ldd	r25, Z+11	; 0x0b
    1ada:	89 2b       	or	r24, r25
    1adc:	21 f0       	breq	.+8      	; 0x1ae6 <prvTimerTask+0xfc>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1ade:	c5 01       	movw	r24, r10
    1ae0:	02 96       	adiw	r24, 0x02	; 2
    1ae2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1ae6:	ce 01       	movw	r24, r28
    1ae8:	06 96       	adiw	r24, 0x06	; 6
    1aea:	0e 94 85 0c 	call	0x190a	; 0x190a <prvSampleTimeNow>

			switch( xMessage.xMessageID )
    1aee:	e9 81       	ldd	r30, Y+1	; 0x01
    1af0:	0e 2f       	mov	r16, r30
    1af2:	ee 0f       	add	r30, r30
    1af4:	11 0b       	sbc	r17, r17
    1af6:	22 0b       	sbc	r18, r18
    1af8:	33 0b       	sbc	r19, r19
    1afa:	0a 30       	cpi	r16, 0x0A	; 10
    1afc:	11 05       	cpc	r17, r1
    1afe:	08 f0       	brcs	.+2      	; 0x1b02 <prvTimerTask+0x118>
    1b00:	40 c0       	rjmp	.+128    	; 0x1b82 <prvTimerTask+0x198>
    1b02:	f8 01       	movw	r30, r16
    1b04:	ec 5c       	subi	r30, 0xCC	; 204
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	0c 94 5f 0e 	jmp	0x1cbe	; 0x1cbe <__tablejump2__>
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
    1b0c:	2a 81       	ldd	r18, Y+2	; 0x02
    1b0e:	3b 81       	ldd	r19, Y+3	; 0x03
    1b10:	d5 01       	movw	r26, r10
    1b12:	1c 96       	adiw	r26, 0x0c	; 12
    1b14:	6d 91       	ld	r22, X+
    1b16:	7c 91       	ld	r23, X
    1b18:	1d 97       	sbiw	r26, 0x0d	; 13
    1b1a:	62 0f       	add	r22, r18
    1b1c:	73 1f       	adc	r23, r19
    1b1e:	ac 01       	movw	r20, r24
    1b20:	c5 01       	movw	r24, r10
    1b22:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <prvInsertTimerInActiveList>
    1b26:	81 30       	cpi	r24, 0x01	; 1
    1b28:	61 f5       	brne	.+88     	; 0x1b82 <prvTimerTask+0x198>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1b2a:	d5 01       	movw	r26, r10
    1b2c:	51 96       	adiw	r26, 0x11	; 17
    1b2e:	ed 91       	ld	r30, X+
    1b30:	fc 91       	ld	r31, X
    1b32:	52 97       	sbiw	r26, 0x12	; 18
    1b34:	c5 01       	movw	r24, r10
    1b36:	09 95       	icall
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    1b38:	f5 01       	movw	r30, r10
    1b3a:	86 85       	ldd	r24, Z+14	; 0x0e
    1b3c:	81 30       	cpi	r24, 0x01	; 1
    1b3e:	09 f5       	brne	.+66     	; 0x1b82 <prvTimerTask+0x198>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    1b40:	4a 81       	ldd	r20, Y+2	; 0x02
    1b42:	5b 81       	ldd	r21, Y+3	; 0x03
    1b44:	84 85       	ldd	r24, Z+12	; 0x0c
    1b46:	95 85       	ldd	r25, Z+13	; 0x0d
    1b48:	48 0f       	add	r20, r24
    1b4a:	59 1f       	adc	r21, r25
    1b4c:	0e 2d       	mov	r16, r14
    1b4e:	1f 2d       	mov	r17, r15
    1b50:	2e 2d       	mov	r18, r14
    1b52:	3f 2d       	mov	r19, r15
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	c5 01       	movw	r24, r10
    1b58:	0e 94 3d 0c 	call	0x187a	; 0x187a <xTimerGenericCommand>
    1b5c:	12 c0       	rjmp	.+36     	; 0x1b82 <prvTimerTask+0x198>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    1b5e:	6a 81       	ldd	r22, Y+2	; 0x02
    1b60:	7b 81       	ldd	r23, Y+3	; 0x03
    1b62:	d5 01       	movw	r26, r10
    1b64:	1d 96       	adiw	r26, 0x0d	; 13
    1b66:	7c 93       	st	X, r23
    1b68:	6e 93       	st	-X, r22
    1b6a:	1c 97       	sbiw	r26, 0x0c	; 12
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    1b6c:	68 0f       	add	r22, r24
    1b6e:	79 1f       	adc	r23, r25
    1b70:	9c 01       	movw	r18, r24
    1b72:	ac 01       	movw	r20, r24
    1b74:	c5 01       	movw	r24, r10
    1b76:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <prvInsertTimerInActiveList>
    1b7a:	03 c0       	rjmp	.+6      	; 0x1b82 <prvTimerTask+0x198>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
    1b7c:	c5 01       	movw	r24, r10
    1b7e:	0e 94 89 03 	call	0x712	; 0x712 <vPortFree>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	4e 2d       	mov	r20, r14
    1b86:	5f 2d       	mov	r21, r15
    1b88:	6c 2d       	mov	r22, r12
    1b8a:	7d 2d       	mov	r23, r13
    1b8c:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <xTimerQueue>
    1b90:	90 91 ba 07 	lds	r25, 0x07BA	; 0x8007ba <xTimerQueue+0x1>
    1b94:	0e 94 17 06 	call	0xc2e	; 0xc2e <xQueueGenericReceive>
    1b98:	81 11       	cpse	r24, r1
    1b9a:	96 cf       	rjmp	.-212    	; 0x1ac8 <prvTimerTask+0xde>
    1b9c:	34 cf       	rjmp	.-408    	; 0x1a06 <prvTimerTask+0x1c>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    1b9e:	0e 94 9d 08 	call	0x113a	; 0x113a <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1ba2:	c4 01       	movw	r24, r8
    1ba4:	0e 94 85 0c 	call	0x190a	; 0x190a <prvSampleTimeNow>
    1ba8:	8c 01       	movw	r16, r24
		if( xTimerListsWereSwitched == pdFALSE )
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	88 23       	and	r24, r24
    1bae:	09 f4       	brne	.+2      	; 0x1bb2 <prvTimerTask+0x1c8>
    1bb0:	76 cf       	rjmp	.-276    	; 0x1a9e <prvTimerTask+0xb4>
    1bb2:	87 cf       	rjmp	.-242    	; 0x1ac2 <prvTimerTask+0xd8>

00001bb4 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
    1bb4:	1f 92       	push	r1
    1bb6:	0f 92       	push	r0
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	0f 92       	push	r0
    1bbc:	11 24       	eor	r1, r1
    1bbe:	2f 93       	push	r18
    1bc0:	3f 93       	push	r19
    1bc2:	4f 93       	push	r20
    1bc4:	5f 93       	push	r21
    1bc6:	6f 93       	push	r22
    1bc8:	7f 93       	push	r23
    1bca:	8f 93       	push	r24
    1bcc:	9f 93       	push	r25
    1bce:	af 93       	push	r26
    1bd0:	bf 93       	push	r27
    1bd2:	ef 93       	push	r30
    1bd4:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    1bd6:	80 91 d1 07 	lds	r24, 0x07D1	; 0x8007d1 <intFunc>
    1bda:	90 91 d2 07 	lds	r25, 0x07D2	; 0x8007d2 <intFunc+0x1>
    1bde:	89 2b       	or	r24, r25
    1be0:	29 f0       	breq	.+10     	; 0x1bec <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
    1be2:	e0 91 d1 07 	lds	r30, 0x07D1	; 0x8007d1 <intFunc>
    1be6:	f0 91 d2 07 	lds	r31, 0x07D2	; 0x8007d2 <intFunc+0x1>
    1bea:	09 95       	icall
}
    1bec:	ff 91       	pop	r31
    1bee:	ef 91       	pop	r30
    1bf0:	bf 91       	pop	r27
    1bf2:	af 91       	pop	r26
    1bf4:	9f 91       	pop	r25
    1bf6:	8f 91       	pop	r24
    1bf8:	7f 91       	pop	r23
    1bfa:	6f 91       	pop	r22
    1bfc:	5f 91       	pop	r21
    1bfe:	4f 91       	pop	r20
    1c00:	3f 91       	pop	r19
    1c02:	2f 91       	pop	r18
    1c04:	0f 90       	pop	r0
    1c06:	0f be       	out	0x3f, r0	; 63
    1c08:	0f 90       	pop	r0
    1c0a:	1f 90       	pop	r1
    1c0c:	18 95       	reti

00001c0e <__vector_2>:

ISR(INT1_vect) {
    1c0e:	1f 92       	push	r1
    1c10:	0f 92       	push	r0
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	0f 92       	push	r0
    1c16:	11 24       	eor	r1, r1
    1c18:	2f 93       	push	r18
    1c1a:	3f 93       	push	r19
    1c1c:	4f 93       	push	r20
    1c1e:	5f 93       	push	r21
    1c20:	6f 93       	push	r22
    1c22:	7f 93       	push	r23
    1c24:	8f 93       	push	r24
    1c26:	9f 93       	push	r25
    1c28:	af 93       	push	r26
    1c2a:	bf 93       	push	r27
    1c2c:	ef 93       	push	r30
    1c2e:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    1c30:	80 91 d3 07 	lds	r24, 0x07D3	; 0x8007d3 <intFunc+0x2>
    1c34:	90 91 d4 07 	lds	r25, 0x07D4	; 0x8007d4 <intFunc+0x3>
    1c38:	89 2b       	or	r24, r25
    1c3a:	29 f0       	breq	.+10     	; 0x1c46 <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
    1c3c:	e0 91 d3 07 	lds	r30, 0x07D3	; 0x8007d3 <intFunc+0x2>
    1c40:	f0 91 d4 07 	lds	r31, 0x07D4	; 0x8007d4 <intFunc+0x3>
    1c44:	09 95       	icall
}
    1c46:	ff 91       	pop	r31
    1c48:	ef 91       	pop	r30
    1c4a:	bf 91       	pop	r27
    1c4c:	af 91       	pop	r26
    1c4e:	9f 91       	pop	r25
    1c50:	8f 91       	pop	r24
    1c52:	7f 91       	pop	r23
    1c54:	6f 91       	pop	r22
    1c56:	5f 91       	pop	r21
    1c58:	4f 91       	pop	r20
    1c5a:	3f 91       	pop	r19
    1c5c:	2f 91       	pop	r18
    1c5e:	0f 90       	pop	r0
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	0f 90       	pop	r0
    1c64:	1f 90       	pop	r1
    1c66:	18 95       	reti

00001c68 <USART_init>:



void USART_init(void){
	
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
    1c68:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
    1c6c:	87 e6       	ldi	r24, 0x67	; 103
    1c6e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<UCSZ02);
    1c72:	8c e1       	ldi	r24, 0x1C	; 28
    1c74:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
    1c78:	86 e0       	ldi	r24, 0x06	; 6
    1c7a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    1c7e:	08 95       	ret

00001c80 <USART_send>:
	}
}

void USART_send( unsigned char data){
	
	while(!(UCSR0A & (1<<UDRE0)));
    1c80:	e0 ec       	ldi	r30, 0xC0	; 192
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	90 81       	ld	r25, Z
    1c86:	95 ff       	sbrs	r25, 5
    1c88:	fd cf       	rjmp	.-6      	; 0x1c84 <USART_send+0x4>
	UDR0 = data;
    1c8a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    1c8e:	08 95       	ret

00001c90 <USART_sendstr>:
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<UCSZ02);
	UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
}


void USART_sendstr( unsigned char* str){
    1c90:	cf 93       	push	r28
    1c92:	df 93       	push	r29
    1c94:	ec 01       	movw	r28, r24
	int i =0;
	
	while (str[i] != 0x00)
    1c96:	88 81       	ld	r24, Y
    1c98:	88 23       	and	r24, r24
    1c9a:	31 f0       	breq	.+12     	; 0x1ca8 <USART_sendstr+0x18>
    1c9c:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_send(str[i]);
    1c9e:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <USART_send>


void USART_sendstr( unsigned char* str){
	int i =0;
	
	while (str[i] != 0x00)
    1ca2:	89 91       	ld	r24, Y+
    1ca4:	81 11       	cpse	r24, r1
    1ca6:	fb cf       	rjmp	.-10     	; 0x1c9e <USART_sendstr+0xe>
	{
		USART_send(str[i]);
		i++;
	}
}
    1ca8:	df 91       	pop	r29
    1caa:	cf 91       	pop	r28
    1cac:	08 95       	ret

00001cae <USART_receive>:
	
}

unsigned char USART_receive(void){
	
	while(!(UCSR0A & (1<<RXC0)));
    1cae:	e0 ec       	ldi	r30, 0xC0	; 192
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	88 23       	and	r24, r24
    1cb6:	ec f7       	brge	.-6      	; 0x1cb2 <USART_receive+0x4>
	return UDR0;
    1cb8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	
    1cbc:	08 95       	ret

00001cbe <__tablejump2__>:
    1cbe:	ee 0f       	add	r30, r30
    1cc0:	ff 1f       	adc	r31, r31
    1cc2:	05 90       	lpm	r0, Z+
    1cc4:	f4 91       	lpm	r31, Z
    1cc6:	e0 2d       	mov	r30, r0
    1cc8:	09 94       	ijmp

00001cca <memcpy>:
    1cca:	fb 01       	movw	r30, r22
    1ccc:	dc 01       	movw	r26, r24
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <memcpy+0xa>
    1cd0:	01 90       	ld	r0, Z+
    1cd2:	0d 92       	st	X+, r0
    1cd4:	41 50       	subi	r20, 0x01	; 1
    1cd6:	50 40       	sbci	r21, 0x00	; 0
    1cd8:	d8 f7       	brcc	.-10     	; 0x1cd0 <memcpy+0x6>
    1cda:	08 95       	ret

00001cdc <_exit>:
    1cdc:	f8 94       	cli

00001cde <__stop_program>:
    1cde:	ff cf       	rjmp	.-2      	; 0x1cde <__stop_program>
